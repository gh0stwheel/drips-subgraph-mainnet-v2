// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AdminChanged extends ethereum.Event {
  get params(): AdminChanged__Params {
    return new AdminChanged__Params(this);
  }
}

export class AdminChanged__Params {
  _event: AdminChanged;

  constructor(event: AdminChanged) {
    this._event = event;
  }

  get previousAdmin(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newAdmin(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class AppAddressUpdated extends ethereum.Event {
  get params(): AppAddressUpdated__Params {
    return new AppAddressUpdated__Params(this);
  }
}

export class AppAddressUpdated__Params {
  _event: AppAddressUpdated;

  constructor(event: AppAddressUpdated) {
    this._event = event;
  }

  get appId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get oldAppAddr(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get newAppAddr(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class AppRegistered extends ethereum.Event {
  get params(): AppRegistered__Params {
    return new AppRegistered__Params(this);
  }
}

export class AppRegistered__Params {
  _event: AppRegistered;

  constructor(event: AppRegistered) {
    this._event = event;
  }

  get appId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get appAddr(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class BeaconUpgraded extends ethereum.Event {
  get params(): BeaconUpgraded__Params {
    return new BeaconUpgraded__Params(this);
  }
}

export class BeaconUpgraded__Params {
  _event: BeaconUpgraded;

  constructor(event: BeaconUpgraded) {
    this._event = event;
  }

  get beacon(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Paused extends ethereum.Event {
  get params(): Paused__Params {
    return new Paused__Params(this);
  }
}

export class Paused__Params {
  _event: Paused;

  constructor(event: Paused) {
    this._event = event;
  }

  get caller(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Unpaused extends ethereum.Event {
  get params(): Unpaused__Params {
    return new Unpaused__Params(this);
  }
}

export class Unpaused__Params {
  _event: Unpaused;

  constructor(event: Unpaused) {
    this._event = event;
  }

  get caller(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Upgraded extends ethereum.Event {
  get params(): Upgraded__Params {
    return new Upgraded__Params(this);
  }
}

export class Upgraded__Params {
  _event: Upgraded;

  constructor(event: Upgraded) {
    this._event = event;
  }

  get implementation(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class DripsReceiverSeen extends ethereum.Event {
  get params(): DripsReceiverSeen__Params {
    return new DripsReceiverSeen__Params(this);
  }
}

export class DripsReceiverSeen__Params {
  _event: DripsReceiverSeen;

  constructor(event: DripsReceiverSeen) {
    this._event = event;
  }

  get receiversHash(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get userId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get config(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class DripsSet extends ethereum.Event {
  get params(): DripsSet__Params {
    return new DripsSet__Params(this);
  }
}

export class DripsSet__Params {
  _event: DripsSet;

  constructor(event: DripsSet) {
    this._event = event;
  }

  get userId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get assetId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get receiversHash(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }

  get balance(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class ReceivedDrips extends ethereum.Event {
  get params(): ReceivedDrips__Params {
    return new ReceivedDrips__Params(this);
  }
}

export class ReceivedDrips__Params {
  _event: ReceivedDrips;

  constructor(event: ReceivedDrips) {
    this._event = event;
  }

  get userId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get assetId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amt(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get receivableCycles(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class Collectable extends ethereum.Event {
  get params(): Collectable__Params {
    return new Collectable__Params(this);
  }
}

export class Collectable__Params {
  _event: Collectable;

  constructor(event: Collectable) {
    this._event = event;
  }

  get userId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get assetId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amt(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Collected extends ethereum.Event {
  get params(): Collected__Params {
    return new Collected__Params(this);
  }
}

export class Collected__Params {
  _event: Collected;

  constructor(event: Collected) {
    this._event = event;
  }

  get userId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get assetId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get collected(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Given extends ethereum.Event {
  get params(): Given__Params {
    return new Given__Params(this);
  }
}

export class Given__Params {
  _event: Given;

  constructor(event: Given) {
    this._event = event;
  }

  get userId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get receiver(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get assetId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get amt(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class Split extends ethereum.Event {
  get params(): Split__Params {
    return new Split__Params(this);
  }
}

export class Split__Params {
  _event: Split;

  constructor(event: Split) {
    this._event = event;
  }

  get userId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get receiver(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get assetId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get amt(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class SplitsReceiverSeen extends ethereum.Event {
  get params(): SplitsReceiverSeen__Params {
    return new SplitsReceiverSeen__Params(this);
  }
}

export class SplitsReceiverSeen__Params {
  _event: SplitsReceiverSeen;

  constructor(event: SplitsReceiverSeen) {
    this._event = event;
  }

  get receiversHash(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get userId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get weight(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class SplitsSet extends ethereum.Event {
  get params(): SplitsSet__Params {
    return new SplitsSet__Params(this);
  }
}

export class SplitsSet__Params {
  _event: SplitsSet;

  constructor(event: SplitsSet) {
    this._event = event;
  }

  get userId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get receiversHash(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }
}

export class DripsHub__balanceAtInputReceiversStruct extends ethereum.Tuple {
  get userId(): BigInt {
    return this[0].toBigInt();
  }

  get config(): BigInt {
    return this[1].toBigInt();
  }
}

export class DripsHub__collectAllResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class DripsHub__collectAllInputCurrReceiversStruct extends ethereum.Tuple {
  get userId(): BigInt {
    return this[0].toBigInt();
  }

  get weight(): BigInt {
    return this[1].toBigInt();
  }
}

export class DripsHub__collectableAllResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class DripsHub__collectableAllInputCurrReceiversStruct extends ethereum.Tuple {
  get userId(): BigInt {
    return this[0].toBigInt();
  }

  get weight(): BigInt {
    return this[1].toBigInt();
  }
}

export class DripsHub__dripsStateResult {
  value0: Bytes;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;

  constructor(value0: Bytes, value1: BigInt, value2: BigInt, value3: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromFixedBytes(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    return map;
  }
}

export class DripsHub__hashDripsInputReceiversStruct extends ethereum.Tuple {
  get userId(): BigInt {
    return this[0].toBigInt();
  }

  get config(): BigInt {
    return this[1].toBigInt();
  }
}

export class DripsHub__hashSplitsInputReceiversStruct extends ethereum.Tuple {
  get userId(): BigInt {
    return this[0].toBigInt();
  }

  get weight(): BigInt {
    return this[1].toBigInt();
  }
}

export class DripsHub__receivableDripsResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class DripsHub__receiveDripsResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class DripsHub__setDripsResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromSignedBigInt(this.value1));
    return map;
  }
}

export class DripsHub__setDripsInputCurrReceiversStruct extends ethereum.Tuple {
  get userId(): BigInt {
    return this[0].toBigInt();
  }

  get config(): BigInt {
    return this[1].toBigInt();
  }
}

export class DripsHub__setDripsInputNewReceiversStruct extends ethereum.Tuple {
  get userId(): BigInt {
    return this[0].toBigInt();
  }

  get config(): BigInt {
    return this[1].toBigInt();
  }
}

export class DripsHub__splitResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class DripsHub__splitInputCurrReceiversStruct extends ethereum.Tuple {
  get userId(): BigInt {
    return this[0].toBigInt();
  }

  get weight(): BigInt {
    return this[1].toBigInt();
  }
}

export class DripsHub extends ethereum.SmartContract {
  static bind(address: Address): DripsHub {
    return new DripsHub("DripsHub", address);
  }

  APP_ID_OFFSET(): BigInt {
    let result = super.call("APP_ID_OFFSET", "APP_ID_OFFSET():(uint256)", []);

    return result[0].toBigInt();
  }

  try_APP_ID_OFFSET(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "APP_ID_OFFSET",
      "APP_ID_OFFSET():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  admin(): Address {
    let result = super.call("admin", "admin():(address)", []);

    return result[0].toAddress();
  }

  try_admin(): ethereum.CallResult<Address> {
    let result = super.tryCall("admin", "admin():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  appAddress(appId: BigInt): Address {
    let result = super.call("appAddress", "appAddress(uint32):(address)", [
      ethereum.Value.fromUnsignedBigInt(appId)
    ]);

    return result[0].toAddress();
  }

  try_appAddress(appId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("appAddress", "appAddress(uint32):(address)", [
      ethereum.Value.fromUnsignedBigInt(appId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  balanceAt(
    userId: BigInt,
    erc20: Address,
    receivers: Array<DripsHub__balanceAtInputReceiversStruct>,
    timestamp: BigInt
  ): BigInt {
    let result = super.call(
      "balanceAt",
      "balanceAt(uint256,address,(uint256,uint192)[],uint32):(uint128)",
      [
        ethereum.Value.fromUnsignedBigInt(userId),
        ethereum.Value.fromAddress(erc20),
        ethereum.Value.fromTupleArray(receivers),
        ethereum.Value.fromUnsignedBigInt(timestamp)
      ]
    );

    return result[0].toBigInt();
  }

  try_balanceAt(
    userId: BigInt,
    erc20: Address,
    receivers: Array<DripsHub__balanceAtInputReceiversStruct>,
    timestamp: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "balanceAt",
      "balanceAt(uint256,address,(uint256,uint192)[],uint32):(uint128)",
      [
        ethereum.Value.fromUnsignedBigInt(userId),
        ethereum.Value.fromAddress(erc20),
        ethereum.Value.fromTupleArray(receivers),
        ethereum.Value.fromUnsignedBigInt(timestamp)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  collect(userId: BigInt, erc20: Address): BigInt {
    let result = super.call("collect", "collect(uint256,address):(uint128)", [
      ethereum.Value.fromUnsignedBigInt(userId),
      ethereum.Value.fromAddress(erc20)
    ]);

    return result[0].toBigInt();
  }

  try_collect(userId: BigInt, erc20: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "collect",
      "collect(uint256,address):(uint128)",
      [
        ethereum.Value.fromUnsignedBigInt(userId),
        ethereum.Value.fromAddress(erc20)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  collectAll(
    userId: BigInt,
    erc20: Address,
    currReceivers: Array<DripsHub__collectAllInputCurrReceiversStruct>
  ): DripsHub__collectAllResult {
    let result = super.call(
      "collectAll",
      "collectAll(uint256,address,(uint256,uint32)[]):(uint128,uint128)",
      [
        ethereum.Value.fromUnsignedBigInt(userId),
        ethereum.Value.fromAddress(erc20),
        ethereum.Value.fromTupleArray(currReceivers)
      ]
    );

    return new DripsHub__collectAllResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_collectAll(
    userId: BigInt,
    erc20: Address,
    currReceivers: Array<DripsHub__collectAllInputCurrReceiversStruct>
  ): ethereum.CallResult<DripsHub__collectAllResult> {
    let result = super.tryCall(
      "collectAll",
      "collectAll(uint256,address,(uint256,uint32)[]):(uint128,uint128)",
      [
        ethereum.Value.fromUnsignedBigInt(userId),
        ethereum.Value.fromAddress(erc20),
        ethereum.Value.fromTupleArray(currReceivers)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new DripsHub__collectAllResult(value[0].toBigInt(), value[1].toBigInt())
    );
  }

  collectable(userId: BigInt, erc20: Address): BigInt {
    let result = super.call(
      "collectable",
      "collectable(uint256,address):(uint128)",
      [
        ethereum.Value.fromUnsignedBigInt(userId),
        ethereum.Value.fromAddress(erc20)
      ]
    );

    return result[0].toBigInt();
  }

  try_collectable(userId: BigInt, erc20: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "collectable",
      "collectable(uint256,address):(uint128)",
      [
        ethereum.Value.fromUnsignedBigInt(userId),
        ethereum.Value.fromAddress(erc20)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  collectableAll(
    userId: BigInt,
    erc20: Address,
    currReceivers: Array<DripsHub__collectableAllInputCurrReceiversStruct>
  ): DripsHub__collectableAllResult {
    let result = super.call(
      "collectableAll",
      "collectableAll(uint256,address,(uint256,uint32)[]):(uint128,uint128)",
      [
        ethereum.Value.fromUnsignedBigInt(userId),
        ethereum.Value.fromAddress(erc20),
        ethereum.Value.fromTupleArray(currReceivers)
      ]
    );

    return new DripsHub__collectableAllResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_collectableAll(
    userId: BigInt,
    erc20: Address,
    currReceivers: Array<DripsHub__collectableAllInputCurrReceiversStruct>
  ): ethereum.CallResult<DripsHub__collectableAllResult> {
    let result = super.tryCall(
      "collectableAll",
      "collectableAll(uint256,address,(uint256,uint32)[]):(uint128,uint128)",
      [
        ethereum.Value.fromUnsignedBigInt(userId),
        ethereum.Value.fromAddress(erc20),
        ethereum.Value.fromTupleArray(currReceivers)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new DripsHub__collectableAllResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  cycleSecs(): BigInt {
    let result = super.call("cycleSecs", "cycleSecs():(uint32)", []);

    return result[0].toBigInt();
  }

  try_cycleSecs(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("cycleSecs", "cycleSecs():(uint32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  dripsState(userId: BigInt, erc20: Address): DripsHub__dripsStateResult {
    let result = super.call(
      "dripsState",
      "dripsState(uint256,address):(bytes32,uint32,uint128,uint32)",
      [
        ethereum.Value.fromUnsignedBigInt(userId),
        ethereum.Value.fromAddress(erc20)
      ]
    );

    return new DripsHub__dripsStateResult(
      result[0].toBytes(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt()
    );
  }

  try_dripsState(
    userId: BigInt,
    erc20: Address
  ): ethereum.CallResult<DripsHub__dripsStateResult> {
    let result = super.tryCall(
      "dripsState",
      "dripsState(uint256,address):(bytes32,uint32,uint128,uint32)",
      [
        ethereum.Value.fromUnsignedBigInt(userId),
        ethereum.Value.fromAddress(erc20)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new DripsHub__dripsStateResult(
        value[0].toBytes(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt()
      )
    );
  }

  hashDrips(receivers: Array<DripsHub__hashDripsInputReceiversStruct>): Bytes {
    let result = super.call(
      "hashDrips",
      "hashDrips((uint256,uint192)[]):(bytes32)",
      [ethereum.Value.fromTupleArray(receivers)]
    );

    return result[0].toBytes();
  }

  try_hashDrips(
    receivers: Array<DripsHub__hashDripsInputReceiversStruct>
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "hashDrips",
      "hashDrips((uint256,uint192)[]):(bytes32)",
      [ethereum.Value.fromTupleArray(receivers)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  hashSplits(
    receivers: Array<DripsHub__hashSplitsInputReceiversStruct>
  ): Bytes {
    let result = super.call(
      "hashSplits",
      "hashSplits((uint256,uint32)[]):(bytes32)",
      [ethereum.Value.fromTupleArray(receivers)]
    );

    return result[0].toBytes();
  }

  try_hashSplits(
    receivers: Array<DripsHub__hashSplitsInputReceiversStruct>
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "hashSplits",
      "hashSplits((uint256,uint32)[]):(bytes32)",
      [ethereum.Value.fromTupleArray(receivers)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  maxDripsReceivers(): i32 {
    let result = super.call(
      "maxDripsReceivers",
      "maxDripsReceivers():(uint8)",
      []
    );

    return result[0].toI32();
  }

  try_maxDripsReceivers(): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "maxDripsReceivers",
      "maxDripsReceivers():(uint8)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  maxSplitsReceivers(): BigInt {
    let result = super.call(
      "maxSplitsReceivers",
      "maxSplitsReceivers():(uint32)",
      []
    );

    return result[0].toBigInt();
  }

  try_maxSplitsReceivers(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "maxSplitsReceivers",
      "maxSplitsReceivers():(uint32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  nextAppId(): BigInt {
    let result = super.call("nextAppId", "nextAppId():(uint32)", []);

    return result[0].toBigInt();
  }

  try_nextAppId(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("nextAppId", "nextAppId():(uint32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  paused(): boolean {
    let result = super.call("paused", "paused():(bool)", []);

    return result[0].toBoolean();
  }

  try_paused(): ethereum.CallResult<boolean> {
    let result = super.tryCall("paused", "paused():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  proxiableUUID(): Bytes {
    let result = super.call("proxiableUUID", "proxiableUUID():(bytes32)", []);

    return result[0].toBytes();
  }

  try_proxiableUUID(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "proxiableUUID",
      "proxiableUUID():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  receivableDrips(
    userId: BigInt,
    erc20: Address,
    maxCycles: BigInt
  ): DripsHub__receivableDripsResult {
    let result = super.call(
      "receivableDrips",
      "receivableDrips(uint256,address,uint32):(uint128,uint32)",
      [
        ethereum.Value.fromUnsignedBigInt(userId),
        ethereum.Value.fromAddress(erc20),
        ethereum.Value.fromUnsignedBigInt(maxCycles)
      ]
    );

    return new DripsHub__receivableDripsResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_receivableDrips(
    userId: BigInt,
    erc20: Address,
    maxCycles: BigInt
  ): ethereum.CallResult<DripsHub__receivableDripsResult> {
    let result = super.tryCall(
      "receivableDrips",
      "receivableDrips(uint256,address,uint32):(uint128,uint32)",
      [
        ethereum.Value.fromUnsignedBigInt(userId),
        ethereum.Value.fromAddress(erc20),
        ethereum.Value.fromUnsignedBigInt(maxCycles)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new DripsHub__receivableDripsResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  receivableDripsCycles(userId: BigInt, erc20: Address): BigInt {
    let result = super.call(
      "receivableDripsCycles",
      "receivableDripsCycles(uint256,address):(uint32)",
      [
        ethereum.Value.fromUnsignedBigInt(userId),
        ethereum.Value.fromAddress(erc20)
      ]
    );

    return result[0].toBigInt();
  }

  try_receivableDripsCycles(
    userId: BigInt,
    erc20: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "receivableDripsCycles",
      "receivableDripsCycles(uint256,address):(uint32)",
      [
        ethereum.Value.fromUnsignedBigInt(userId),
        ethereum.Value.fromAddress(erc20)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  receiveDrips(
    userId: BigInt,
    erc20: Address,
    maxCycles: BigInt
  ): DripsHub__receiveDripsResult {
    let result = super.call(
      "receiveDrips",
      "receiveDrips(uint256,address,uint32):(uint128,uint32)",
      [
        ethereum.Value.fromUnsignedBigInt(userId),
        ethereum.Value.fromAddress(erc20),
        ethereum.Value.fromUnsignedBigInt(maxCycles)
      ]
    );

    return new DripsHub__receiveDripsResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_receiveDrips(
    userId: BigInt,
    erc20: Address,
    maxCycles: BigInt
  ): ethereum.CallResult<DripsHub__receiveDripsResult> {
    let result = super.tryCall(
      "receiveDrips",
      "receiveDrips(uint256,address,uint32):(uint128,uint32)",
      [
        ethereum.Value.fromUnsignedBigInt(userId),
        ethereum.Value.fromAddress(erc20),
        ethereum.Value.fromUnsignedBigInt(maxCycles)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new DripsHub__receiveDripsResult(value[0].toBigInt(), value[1].toBigInt())
    );
  }

  registerApp(appAddr: Address): BigInt {
    let result = super.call("registerApp", "registerApp(address):(uint32)", [
      ethereum.Value.fromAddress(appAddr)
    ]);

    return result[0].toBigInt();
  }

  try_registerApp(appAddr: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("registerApp", "registerApp(address):(uint32)", [
      ethereum.Value.fromAddress(appAddr)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  reserve(): Address {
    let result = super.call("reserve", "reserve():(address)", []);

    return result[0].toAddress();
  }

  try_reserve(): ethereum.CallResult<Address> {
    let result = super.tryCall("reserve", "reserve():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  setDrips(
    userId: BigInt,
    erc20: Address,
    currReceivers: Array<DripsHub__setDripsInputCurrReceiversStruct>,
    balanceDelta: BigInt,
    newReceivers: Array<DripsHub__setDripsInputNewReceiversStruct>
  ): DripsHub__setDripsResult {
    let result = super.call(
      "setDrips",
      "setDrips(uint256,address,(uint256,uint192)[],int128,(uint256,uint192)[]):(uint128,int128)",
      [
        ethereum.Value.fromUnsignedBigInt(userId),
        ethereum.Value.fromAddress(erc20),
        ethereum.Value.fromTupleArray(currReceivers),
        ethereum.Value.fromSignedBigInt(balanceDelta),
        ethereum.Value.fromTupleArray(newReceivers)
      ]
    );

    return new DripsHub__setDripsResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_setDrips(
    userId: BigInt,
    erc20: Address,
    currReceivers: Array<DripsHub__setDripsInputCurrReceiversStruct>,
    balanceDelta: BigInt,
    newReceivers: Array<DripsHub__setDripsInputNewReceiversStruct>
  ): ethereum.CallResult<DripsHub__setDripsResult> {
    let result = super.tryCall(
      "setDrips",
      "setDrips(uint256,address,(uint256,uint192)[],int128,(uint256,uint192)[]):(uint128,int128)",
      [
        ethereum.Value.fromUnsignedBigInt(userId),
        ethereum.Value.fromAddress(erc20),
        ethereum.Value.fromTupleArray(currReceivers),
        ethereum.Value.fromSignedBigInt(balanceDelta),
        ethereum.Value.fromTupleArray(newReceivers)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new DripsHub__setDripsResult(value[0].toBigInt(), value[1].toBigInt())
    );
  }

  split(
    userId: BigInt,
    erc20: Address,
    currReceivers: Array<DripsHub__splitInputCurrReceiversStruct>
  ): DripsHub__splitResult {
    let result = super.call(
      "split",
      "split(uint256,address,(uint256,uint32)[]):(uint128,uint128)",
      [
        ethereum.Value.fromUnsignedBigInt(userId),
        ethereum.Value.fromAddress(erc20),
        ethereum.Value.fromTupleArray(currReceivers)
      ]
    );

    return new DripsHub__splitResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_split(
    userId: BigInt,
    erc20: Address,
    currReceivers: Array<DripsHub__splitInputCurrReceiversStruct>
  ): ethereum.CallResult<DripsHub__splitResult> {
    let result = super.tryCall(
      "split",
      "split(uint256,address,(uint256,uint32)[]):(uint128,uint128)",
      [
        ethereum.Value.fromUnsignedBigInt(userId),
        ethereum.Value.fromAddress(erc20),
        ethereum.Value.fromTupleArray(currReceivers)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new DripsHub__splitResult(value[0].toBigInt(), value[1].toBigInt())
    );
  }

  splitsHash(userId: BigInt): Bytes {
    let result = super.call("splitsHash", "splitsHash(uint256):(bytes32)", [
      ethereum.Value.fromUnsignedBigInt(userId)
    ]);

    return result[0].toBytes();
  }

  try_splitsHash(userId: BigInt): ethereum.CallResult<Bytes> {
    let result = super.tryCall("splitsHash", "splitsHash(uint256):(bytes32)", [
      ethereum.Value.fromUnsignedBigInt(userId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  splittable(userId: BigInt, erc20: Address): BigInt {
    let result = super.call(
      "splittable",
      "splittable(uint256,address):(uint128)",
      [
        ethereum.Value.fromUnsignedBigInt(userId),
        ethereum.Value.fromAddress(erc20)
      ]
    );

    return result[0].toBigInt();
  }

  try_splittable(userId: BigInt, erc20: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "splittable",
      "splittable(uint256,address):(uint128)",
      [
        ethereum.Value.fromUnsignedBigInt(userId),
        ethereum.Value.fromAddress(erc20)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalSplitsWeight(): BigInt {
    let result = super.call(
      "totalSplitsWeight",
      "totalSplitsWeight():(uint32)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalSplitsWeight(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalSplitsWeight",
      "totalSplitsWeight():(uint32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MAX_SPLITS_RECEIVERS(): BigInt {
    let result = super.call(
      "MAX_SPLITS_RECEIVERS",
      "MAX_SPLITS_RECEIVERS():(uint32)",
      []
    );

    return result[0].toBigInt();
  }

  try_MAX_SPLITS_RECEIVERS(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MAX_SPLITS_RECEIVERS",
      "MAX_SPLITS_RECEIVERS():(uint32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  TOTAL_SPLITS_WEIGHT(): BigInt {
    let result = super.call(
      "TOTAL_SPLITS_WEIGHT",
      "TOTAL_SPLITS_WEIGHT():(uint32)",
      []
    );

    return result[0].toBigInt();
  }

  try_TOTAL_SPLITS_WEIGHT(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "TOTAL_SPLITS_WEIGHT",
      "TOTAL_SPLITS_WEIGHT():(uint32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _cycleSecs(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _reserve(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ChangeAdminCall extends ethereum.Call {
  get inputs(): ChangeAdminCall__Inputs {
    return new ChangeAdminCall__Inputs(this);
  }

  get outputs(): ChangeAdminCall__Outputs {
    return new ChangeAdminCall__Outputs(this);
  }
}

export class ChangeAdminCall__Inputs {
  _call: ChangeAdminCall;

  constructor(call: ChangeAdminCall) {
    this._call = call;
  }

  get newAdmin(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ChangeAdminCall__Outputs {
  _call: ChangeAdminCall;

  constructor(call: ChangeAdminCall) {
    this._call = call;
  }
}

export class CollectCall extends ethereum.Call {
  get inputs(): CollectCall__Inputs {
    return new CollectCall__Inputs(this);
  }

  get outputs(): CollectCall__Outputs {
    return new CollectCall__Outputs(this);
  }
}

export class CollectCall__Inputs {
  _call: CollectCall;

  constructor(call: CollectCall) {
    this._call = call;
  }

  get userId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get erc20(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class CollectCall__Outputs {
  _call: CollectCall;

  constructor(call: CollectCall) {
    this._call = call;
  }

  get amt(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class CollectAllCall extends ethereum.Call {
  get inputs(): CollectAllCall__Inputs {
    return new CollectAllCall__Inputs(this);
  }

  get outputs(): CollectAllCall__Outputs {
    return new CollectAllCall__Outputs(this);
  }
}

export class CollectAllCall__Inputs {
  _call: CollectAllCall;

  constructor(call: CollectAllCall) {
    this._call = call;
  }

  get userId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get erc20(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get currReceivers(): Array<CollectAllCallCurrReceiversStruct> {
    return this._call.inputValues[2].value.toTupleArray<
      CollectAllCallCurrReceiversStruct
    >();
  }
}

export class CollectAllCall__Outputs {
  _call: CollectAllCall;

  constructor(call: CollectAllCall) {
    this._call = call;
  }

  get collectedAmt(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get splitAmt(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class CollectAllCallCurrReceiversStruct extends ethereum.Tuple {
  get userId(): BigInt {
    return this[0].toBigInt();
  }

  get weight(): BigInt {
    return this[1].toBigInt();
  }
}

export class GiveCall extends ethereum.Call {
  get inputs(): GiveCall__Inputs {
    return new GiveCall__Inputs(this);
  }

  get outputs(): GiveCall__Outputs {
    return new GiveCall__Outputs(this);
  }
}

export class GiveCall__Inputs {
  _call: GiveCall;

  constructor(call: GiveCall) {
    this._call = call;
  }

  get userId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get receiver(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get erc20(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get amt(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class GiveCall__Outputs {
  _call: GiveCall;

  constructor(call: GiveCall) {
    this._call = call;
  }
}

export class PauseCall extends ethereum.Call {
  get inputs(): PauseCall__Inputs {
    return new PauseCall__Inputs(this);
  }

  get outputs(): PauseCall__Outputs {
    return new PauseCall__Outputs(this);
  }
}

export class PauseCall__Inputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class PauseCall__Outputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class ReceiveDripsCall extends ethereum.Call {
  get inputs(): ReceiveDripsCall__Inputs {
    return new ReceiveDripsCall__Inputs(this);
  }

  get outputs(): ReceiveDripsCall__Outputs {
    return new ReceiveDripsCall__Outputs(this);
  }
}

export class ReceiveDripsCall__Inputs {
  _call: ReceiveDripsCall;

  constructor(call: ReceiveDripsCall) {
    this._call = call;
  }

  get userId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get erc20(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get maxCycles(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class ReceiveDripsCall__Outputs {
  _call: ReceiveDripsCall;

  constructor(call: ReceiveDripsCall) {
    this._call = call;
  }

  get receivedAmt(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get receivableCycles(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class RegisterAppCall extends ethereum.Call {
  get inputs(): RegisterAppCall__Inputs {
    return new RegisterAppCall__Inputs(this);
  }

  get outputs(): RegisterAppCall__Outputs {
    return new RegisterAppCall__Outputs(this);
  }
}

export class RegisterAppCall__Inputs {
  _call: RegisterAppCall;

  constructor(call: RegisterAppCall) {
    this._call = call;
  }

  get appAddr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RegisterAppCall__Outputs {
  _call: RegisterAppCall;

  constructor(call: RegisterAppCall) {
    this._call = call;
  }

  get appId(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class SetDripsCall extends ethereum.Call {
  get inputs(): SetDripsCall__Inputs {
    return new SetDripsCall__Inputs(this);
  }

  get outputs(): SetDripsCall__Outputs {
    return new SetDripsCall__Outputs(this);
  }
}

export class SetDripsCall__Inputs {
  _call: SetDripsCall;

  constructor(call: SetDripsCall) {
    this._call = call;
  }

  get userId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get erc20(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get currReceivers(): Array<SetDripsCallCurrReceiversStruct> {
    return this._call.inputValues[2].value.toTupleArray<
      SetDripsCallCurrReceiversStruct
    >();
  }

  get balanceDelta(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get newReceivers(): Array<SetDripsCallNewReceiversStruct> {
    return this._call.inputValues[4].value.toTupleArray<
      SetDripsCallNewReceiversStruct
    >();
  }
}

export class SetDripsCall__Outputs {
  _call: SetDripsCall;

  constructor(call: SetDripsCall) {
    this._call = call;
  }

  get newBalance(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get realBalanceDelta(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class SetDripsCallCurrReceiversStruct extends ethereum.Tuple {
  get userId(): BigInt {
    return this[0].toBigInt();
  }

  get config(): BigInt {
    return this[1].toBigInt();
  }
}

export class SetDripsCallNewReceiversStruct extends ethereum.Tuple {
  get userId(): BigInt {
    return this[0].toBigInt();
  }

  get config(): BigInt {
    return this[1].toBigInt();
  }
}

export class SetSplitsCall extends ethereum.Call {
  get inputs(): SetSplitsCall__Inputs {
    return new SetSplitsCall__Inputs(this);
  }

  get outputs(): SetSplitsCall__Outputs {
    return new SetSplitsCall__Outputs(this);
  }
}

export class SetSplitsCall__Inputs {
  _call: SetSplitsCall;

  constructor(call: SetSplitsCall) {
    this._call = call;
  }

  get userId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get receivers(): Array<SetSplitsCallReceiversStruct> {
    return this._call.inputValues[1].value.toTupleArray<
      SetSplitsCallReceiversStruct
    >();
  }
}

export class SetSplitsCall__Outputs {
  _call: SetSplitsCall;

  constructor(call: SetSplitsCall) {
    this._call = call;
  }
}

export class SetSplitsCallReceiversStruct extends ethereum.Tuple {
  get userId(): BigInt {
    return this[0].toBigInt();
  }

  get weight(): BigInt {
    return this[1].toBigInt();
  }
}

export class SplitCall extends ethereum.Call {
  get inputs(): SplitCall__Inputs {
    return new SplitCall__Inputs(this);
  }

  get outputs(): SplitCall__Outputs {
    return new SplitCall__Outputs(this);
  }
}

export class SplitCall__Inputs {
  _call: SplitCall;

  constructor(call: SplitCall) {
    this._call = call;
  }

  get userId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get erc20(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get currReceivers(): Array<SplitCallCurrReceiversStruct> {
    return this._call.inputValues[2].value.toTupleArray<
      SplitCallCurrReceiversStruct
    >();
  }
}

export class SplitCall__Outputs {
  _call: SplitCall;

  constructor(call: SplitCall) {
    this._call = call;
  }

  get collectableAmt(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get splitAmt(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class SplitCallCurrReceiversStruct extends ethereum.Tuple {
  get userId(): BigInt {
    return this[0].toBigInt();
  }

  get weight(): BigInt {
    return this[1].toBigInt();
  }
}

export class UnpauseCall extends ethereum.Call {
  get inputs(): UnpauseCall__Inputs {
    return new UnpauseCall__Inputs(this);
  }

  get outputs(): UnpauseCall__Outputs {
    return new UnpauseCall__Outputs(this);
  }
}

export class UnpauseCall__Inputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class UnpauseCall__Outputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class UpdateAppAddressCall extends ethereum.Call {
  get inputs(): UpdateAppAddressCall__Inputs {
    return new UpdateAppAddressCall__Inputs(this);
  }

  get outputs(): UpdateAppAddressCall__Outputs {
    return new UpdateAppAddressCall__Outputs(this);
  }
}

export class UpdateAppAddressCall__Inputs {
  _call: UpdateAppAddressCall;

  constructor(call: UpdateAppAddressCall) {
    this._call = call;
  }

  get appId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get newAppAddr(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class UpdateAppAddressCall__Outputs {
  _call: UpdateAppAddressCall;

  constructor(call: UpdateAppAddressCall) {
    this._call = call;
  }
}

export class UpgradeToCall extends ethereum.Call {
  get inputs(): UpgradeToCall__Inputs {
    return new UpgradeToCall__Inputs(this);
  }

  get outputs(): UpgradeToCall__Outputs {
    return new UpgradeToCall__Outputs(this);
  }
}

export class UpgradeToCall__Inputs {
  _call: UpgradeToCall;

  constructor(call: UpgradeToCall) {
    this._call = call;
  }

  get newImplementation(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpgradeToCall__Outputs {
  _call: UpgradeToCall;

  constructor(call: UpgradeToCall) {
    this._call = call;
  }
}

export class UpgradeToAndCallCall extends ethereum.Call {
  get inputs(): UpgradeToAndCallCall__Inputs {
    return new UpgradeToAndCallCall__Inputs(this);
  }

  get outputs(): UpgradeToAndCallCall__Outputs {
    return new UpgradeToAndCallCall__Outputs(this);
  }
}

export class UpgradeToAndCallCall__Inputs {
  _call: UpgradeToAndCallCall;

  constructor(call: UpgradeToAndCallCall) {
    this._call = call;
  }

  get newImplementation(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get data(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class UpgradeToAndCallCall__Outputs {
  _call: UpgradeToAndCallCall;

  constructor(call: UpgradeToAndCallCall) {
    this._call = call;
  }
}
