// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get approved(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class NewBuilder extends ethereum.Event {
  get params(): NewBuilder__Params {
    return new NewBuilder__Params(this);
  }
}

export class NewBuilder__Params {
  _event: NewBuilder;

  constructor(event: NewBuilder) {
    this._event = event;
  }

  get builder(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class NewContractURI extends ethereum.Event {
  get params(): NewContractURI__Params {
    return new NewContractURI__Params(this);
  }
}

export class NewContractURI__Params {
  _event: NewContractURI;

  constructor(event: NewContractURI) {
    this._event = event;
  }

  get contractURI(): string {
    return this._event.parameters[0].value.toString();
  }
}

export class NewStreamingToken extends ethereum.Event {
  get params(): NewStreamingToken__Params {
    return new NewStreamingToken__Params(this);
  }
}

export class NewStreamingToken__Params {
  _event: NewStreamingToken;

  constructor(event: NewStreamingToken) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get receiver(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get typeId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get topUp(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get amtPerSec(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class NewToken extends ethereum.Event {
  get params(): NewToken__Params {
    return new NewToken__Params(this);
  }
}

export class NewToken__Params {
  _event: NewToken;

  constructor(event: NewToken) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get receiver(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get typeId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get giveAmt(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class NewType extends ethereum.Event {
  get params(): NewType__Params {
    return new NewType__Params(this);
  }
}

export class NewType__Params {
  _event: NewType;

  constructor(event: NewType) {
    this._event = event;
  }

  get nftType(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get limit(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get minAmt(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get streaming(): boolean {
    return this._event.parameters[3].value.toBoolean();
  }

  get ipfsHash(): string {
    return this._event.parameters[4].value.toString();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class SplitsUpdated extends ethereum.Event {
  get params(): SplitsUpdated__Params {
    return new SplitsUpdated__Params(this);
  }
}

export class SplitsUpdated__Params {
  _event: SplitsUpdated;

  constructor(event: SplitsUpdated) {
    this._event = event;
  }

  get splits(): Array<SplitsUpdatedSplitsStruct> {
    return this._event.parameters[0].value.toTupleArray<
      SplitsUpdatedSplitsStruct
    >();
  }
}

export class SplitsUpdatedSplitsStruct extends ethereum.Tuple {
  get receiver(): Address {
    return this[0].toAddress();
  }

  get weight(): BigInt {
    return this[1].toBigInt();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class DripsToken__collectResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class DripsToken__collectInputCurrSplitsStruct extends ethereum.Tuple {
  get receiver(): Address {
    return this[0].toAddress();
  }

  get weight(): BigInt {
    return this[1].toBigInt();
  }
}

export class DripsToken__collectableResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class DripsToken__collectableInputCurrSplitsStruct extends ethereum.Tuple {
  get receiver(): Address {
    return this[0].toAddress();
  }

  get weight(): BigInt {
    return this[1].toBigInt();
  }
}

export class DripsToken__nftTypesResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: boolean;
  value4: string;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: boolean,
    value4: string
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromBoolean(this.value3));
    map.set("value4", ethereum.Value.fromString(this.value4));
    return map;
  }
}

export class DripsToken__nftsResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt, value3: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    return map;
  }
}

export class DripsToken extends ethereum.SmartContract {
  static bind(address: Address): DripsToken {
    return new DripsToken("DripsToken", address);
  }

  active(tokenId: BigInt): boolean {
    let result = super.call("active", "active(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toBoolean();
  }

  try_active(tokenId: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("active", "active(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  activeUntil(tokenId: BigInt): BigInt {
    let result = super.call("activeUntil", "activeUntil(uint256):(uint128)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toBigInt();
  }

  try_activeUntil(tokenId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "activeUntil",
      "activeUntil(uint256):(uint128)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  authMint(nftReceiver: Address, typeId: BigInt, value: BigInt): BigInt {
    let result = super.call(
      "authMint",
      "authMint(address,uint128,uint128):(uint256)",
      [
        ethereum.Value.fromAddress(nftReceiver),
        ethereum.Value.fromUnsignedBigInt(typeId),
        ethereum.Value.fromUnsignedBigInt(value)
      ]
    );

    return result[0].toBigInt();
  }

  try_authMint(
    nftReceiver: Address,
    typeId: BigInt,
    value: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "authMint",
      "authMint(address,uint128,uint128):(uint256)",
      [
        ethereum.Value.fromAddress(nftReceiver),
        ethereum.Value.fromUnsignedBigInt(typeId),
        ethereum.Value.fromUnsignedBigInt(value)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOf(owner: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  builder(): Address {
    let result = super.call("builder", "builder():(address)", []);

    return result[0].toAddress();
  }

  try_builder(): ethereum.CallResult<Address> {
    let result = super.tryCall("builder", "builder():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  collect(
    currSplits: Array<DripsToken__collectInputCurrSplitsStruct>
  ): DripsToken__collectResult {
    let result = super.call(
      "collect",
      "collect((address,uint32)[]):(uint128,uint128)",
      [ethereum.Value.fromTupleArray(currSplits)]
    );

    return new DripsToken__collectResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_collect(
    currSplits: Array<DripsToken__collectInputCurrSplitsStruct>
  ): ethereum.CallResult<DripsToken__collectResult> {
    let result = super.tryCall(
      "collect",
      "collect((address,uint32)[]):(uint128,uint128)",
      [ethereum.Value.fromTupleArray(currSplits)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new DripsToken__collectResult(value[0].toBigInt(), value[1].toBigInt())
    );
  }

  collectable(
    currSplits: Array<DripsToken__collectableInputCurrSplitsStruct>
  ): DripsToken__collectableResult {
    let result = super.call(
      "collectable",
      "collectable((address,uint32)[]):(uint128,uint128)",
      [ethereum.Value.fromTupleArray(currSplits)]
    );

    return new DripsToken__collectableResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_collectable(
    currSplits: Array<DripsToken__collectableInputCurrSplitsStruct>
  ): ethereum.CallResult<DripsToken__collectableResult> {
    let result = super.tryCall(
      "collectable",
      "collectable((address,uint32)[]):(uint128,uint128)",
      [ethereum.Value.fromTupleArray(currSplits)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new DripsToken__collectableResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  contractURI(): string {
    let result = super.call("contractURI", "contractURI():(string)", []);

    return result[0].toString();
  }

  try_contractURI(): ethereum.CallResult<string> {
    let result = super.tryCall("contractURI", "contractURI():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  createTokenId(id: BigInt, nftType: BigInt): BigInt {
    let result = super.call(
      "createTokenId",
      "createTokenId(uint128,uint128):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(id),
        ethereum.Value.fromUnsignedBigInt(nftType)
      ]
    );

    return result[0].toBigInt();
  }

  try_createTokenId(id: BigInt, nftType: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "createTokenId",
      "createTokenId(uint128,uint128):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(id),
        ethereum.Value.fromUnsignedBigInt(nftType)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  currLeftSecsInCycle(): BigInt {
    let result = super.call(
      "currLeftSecsInCycle",
      "currLeftSecsInCycle():(uint64)",
      []
    );

    return result[0].toBigInt();
  }

  try_currLeftSecsInCycle(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "currLeftSecsInCycle",
      "currLeftSecsInCycle():(uint64)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  cycleSecs(): BigInt {
    let result = super.call("cycleSecs", "cycleSecs():(uint64)", []);

    return result[0].toBigInt();
  }

  try_cycleSecs(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("cycleSecs", "cycleSecs():(uint64)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  dai(): Address {
    let result = super.call("dai", "dai():(address)", []);

    return result[0].toAddress();
  }

  try_dai(): ethereum.CallResult<Address> {
    let result = super.tryCall("dai", "dai():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  deployer(): Address {
    let result = super.call("deployer", "deployer():(address)", []);

    return result[0].toAddress();
  }

  try_deployer(): ethereum.CallResult<Address> {
    let result = super.tryCall("deployer", "deployer():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getApproved(tokenId: BigInt): Address {
    let result = super.call("getApproved", "getApproved(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_getApproved(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getApproved",
      "getApproved(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  hub(): Address {
    let result = super.call("hub", "hub():(address)", []);

    return result[0].toAddress();
  }

  try_hub(): ethereum.CallResult<Address> {
    let result = super.tryCall("hub", "hub():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  influence(tokenId: BigInt): BigInt {
    let result = super.call("influence", "influence(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toBigInt();
  }

  try_influence(tokenId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("influence", "influence(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  initialized(): boolean {
    let result = super.call("initialized", "initialized():(bool)", []);

    return result[0].toBoolean();
  }

  try_initialized(): ethereum.CallResult<boolean> {
    let result = super.tryCall("initialized", "initialized():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isApprovedForAll(owner: Address, operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    owner: Address,
    operator: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  mint(nftReceiver: Address, typeId: BigInt, giveAmt: BigInt): BigInt {
    let result = super.call("mint", "mint(address,uint128,uint128):(uint256)", [
      ethereum.Value.fromAddress(nftReceiver),
      ethereum.Value.fromUnsignedBigInt(typeId),
      ethereum.Value.fromUnsignedBigInt(giveAmt)
    ]);

    return result[0].toBigInt();
  }

  try_mint(
    nftReceiver: Address,
    typeId: BigInt,
    giveAmt: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "mint",
      "mint(address,uint128,uint128):(uint256)",
      [
        ethereum.Value.fromAddress(nftReceiver),
        ethereum.Value.fromUnsignedBigInt(typeId),
        ethereum.Value.fromUnsignedBigInt(giveAmt)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  mint1(
    nftReceiver: Address,
    typeId: BigInt,
    amtGive: BigInt,
    nonce: BigInt,
    expiry: BigInt,
    v: i32,
    r: Bytes,
    s: Bytes
  ): BigInt {
    let result = super.call(
      "mint",
      "mint(address,uint128,uint128,uint256,uint256,uint8,bytes32,bytes32):(uint256)",
      [
        ethereum.Value.fromAddress(nftReceiver),
        ethereum.Value.fromUnsignedBigInt(typeId),
        ethereum.Value.fromUnsignedBigInt(amtGive),
        ethereum.Value.fromUnsignedBigInt(nonce),
        ethereum.Value.fromUnsignedBigInt(expiry),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(v)),
        ethereum.Value.fromFixedBytes(r),
        ethereum.Value.fromFixedBytes(s)
      ]
    );

    return result[0].toBigInt();
  }

  try_mint1(
    nftReceiver: Address,
    typeId: BigInt,
    amtGive: BigInt,
    nonce: BigInt,
    expiry: BigInt,
    v: i32,
    r: Bytes,
    s: Bytes
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "mint",
      "mint(address,uint128,uint128,uint256,uint256,uint8,bytes32,bytes32):(uint256)",
      [
        ethereum.Value.fromAddress(nftReceiver),
        ethereum.Value.fromUnsignedBigInt(typeId),
        ethereum.Value.fromUnsignedBigInt(amtGive),
        ethereum.Value.fromUnsignedBigInt(nonce),
        ethereum.Value.fromUnsignedBigInt(expiry),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(v)),
        ethereum.Value.fromFixedBytes(r),
        ethereum.Value.fromFixedBytes(s)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  mintStreaming(
    nftReceiver: Address,
    typeId: BigInt,
    topUpAmt: BigInt,
    amtPerSec: BigInt,
    nonce: BigInt,
    expiry: BigInt,
    v: i32,
    r: Bytes,
    s: Bytes
  ): BigInt {
    let result = super.call(
      "mintStreaming",
      "mintStreaming(address,uint128,uint128,uint128,uint256,uint256,uint8,bytes32,bytes32):(uint256)",
      [
        ethereum.Value.fromAddress(nftReceiver),
        ethereum.Value.fromUnsignedBigInt(typeId),
        ethereum.Value.fromUnsignedBigInt(topUpAmt),
        ethereum.Value.fromUnsignedBigInt(amtPerSec),
        ethereum.Value.fromUnsignedBigInt(nonce),
        ethereum.Value.fromUnsignedBigInt(expiry),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(v)),
        ethereum.Value.fromFixedBytes(r),
        ethereum.Value.fromFixedBytes(s)
      ]
    );

    return result[0].toBigInt();
  }

  try_mintStreaming(
    nftReceiver: Address,
    typeId: BigInt,
    topUpAmt: BigInt,
    amtPerSec: BigInt,
    nonce: BigInt,
    expiry: BigInt,
    v: i32,
    r: Bytes,
    s: Bytes
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "mintStreaming",
      "mintStreaming(address,uint128,uint128,uint128,uint256,uint256,uint8,bytes32,bytes32):(uint256)",
      [
        ethereum.Value.fromAddress(nftReceiver),
        ethereum.Value.fromUnsignedBigInt(typeId),
        ethereum.Value.fromUnsignedBigInt(topUpAmt),
        ethereum.Value.fromUnsignedBigInt(amtPerSec),
        ethereum.Value.fromUnsignedBigInt(nonce),
        ethereum.Value.fromUnsignedBigInt(expiry),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(v)),
        ethereum.Value.fromFixedBytes(r),
        ethereum.Value.fromFixedBytes(s)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  mintStreaming1(
    nftReceiver: Address,
    typeId: BigInt,
    topUpAmt: BigInt,
    amtPerSec: BigInt
  ): BigInt {
    let result = super.call(
      "mintStreaming",
      "mintStreaming(address,uint128,uint128,uint128):(uint256)",
      [
        ethereum.Value.fromAddress(nftReceiver),
        ethereum.Value.fromUnsignedBigInt(typeId),
        ethereum.Value.fromUnsignedBigInt(topUpAmt),
        ethereum.Value.fromUnsignedBigInt(amtPerSec)
      ]
    );

    return result[0].toBigInt();
  }

  try_mintStreaming1(
    nftReceiver: Address,
    typeId: BigInt,
    topUpAmt: BigInt,
    amtPerSec: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "mintStreaming",
      "mintStreaming(address,uint128,uint128,uint128):(uint256)",
      [
        ethereum.Value.fromAddress(nftReceiver),
        ethereum.Value.fromUnsignedBigInt(typeId),
        ethereum.Value.fromUnsignedBigInt(topUpAmt),
        ethereum.Value.fromUnsignedBigInt(amtPerSec)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  nftTypes(param0: BigInt): DripsToken__nftTypesResult {
    let result = super.call(
      "nftTypes",
      "nftTypes(uint128):(uint64,uint64,uint128,bool,string)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new DripsToken__nftTypesResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBoolean(),
      result[4].toString()
    );
  }

  try_nftTypes(
    param0: BigInt
  ): ethereum.CallResult<DripsToken__nftTypesResult> {
    let result = super.tryCall(
      "nftTypes",
      "nftTypes(uint128):(uint64,uint64,uint128,bool,string)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new DripsToken__nftTypesResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBoolean(),
        value[4].toString()
      )
    );
  }

  nfts(param0: BigInt): DripsToken__nftsResult {
    let result = super.call(
      "nfts",
      "nfts(uint256):(uint64,uint128,uint128,uint64)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new DripsToken__nftsResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt()
    );
  }

  try_nfts(param0: BigInt): ethereum.CallResult<DripsToken__nftsResult> {
    let result = super.tryCall(
      "nfts",
      "nfts(uint256):(uint64,uint128,uint128,uint64)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new DripsToken__nftsResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt()
      )
    );
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  ownerOf(tokenId: BigInt): Address {
    let result = super.call("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_ownerOf(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  streaming(tokenId: BigInt): boolean {
    let result = super.call("streaming", "streaming(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toBoolean();
  }

  try_streaming(tokenId: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("streaming", "streaming(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  tokenType(tokenId: BigInt): BigInt {
    let result = super.call("tokenType", "tokenType(uint256):(uint128)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toBigInt();
  }

  try_tokenType(tokenId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("tokenType", "tokenType(uint256):(uint128)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenURI(tokenId: BigInt): string {
    let result = super.call("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toString();
  }

  try_tokenURI(tokenId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  withdraw(tokenId: BigInt, withdrawAmt: BigInt): BigInt {
    let result = super.call("withdraw", "withdraw(uint256,uint128):(uint128)", [
      ethereum.Value.fromUnsignedBigInt(tokenId),
      ethereum.Value.fromUnsignedBigInt(withdrawAmt)
    ]);

    return result[0].toBigInt();
  }

  try_withdraw(
    tokenId: BigInt,
    withdrawAmt: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "withdraw",
      "withdraw(uint256,uint128):(uint128)",
      [
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromUnsignedBigInt(withdrawAmt)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  withdrawable(tokenId: BigInt): BigInt {
    let result = super.call("withdrawable", "withdrawable(uint256):(uint128)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toBigInt();
  }

  try_withdrawable(tokenId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "withdrawable",
      "withdrawable(uint256):(uint128)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get hub_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get deployer_(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddStreamingTypeCall extends ethereum.Call {
  get inputs(): AddStreamingTypeCall__Inputs {
    return new AddStreamingTypeCall__Inputs(this);
  }

  get outputs(): AddStreamingTypeCall__Outputs {
    return new AddStreamingTypeCall__Outputs(this);
  }
}

export class AddStreamingTypeCall__Inputs {
  _call: AddStreamingTypeCall;

  constructor(call: AddStreamingTypeCall) {
    this._call = call;
  }

  get newTypeId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get limit(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get minAmtPerSec(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get ipfsHash(): string {
    return this._call.inputValues[3].value.toString();
  }
}

export class AddStreamingTypeCall__Outputs {
  _call: AddStreamingTypeCall;

  constructor(call: AddStreamingTypeCall) {
    this._call = call;
  }
}

export class AddTypeCall extends ethereum.Call {
  get inputs(): AddTypeCall__Inputs {
    return new AddTypeCall__Inputs(this);
  }

  get outputs(): AddTypeCall__Outputs {
    return new AddTypeCall__Outputs(this);
  }
}

export class AddTypeCall__Inputs {
  _call: AddTypeCall;

  constructor(call: AddTypeCall) {
    this._call = call;
  }

  get newTypeId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get limit(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get minGiveAmt(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get ipfsHash(): string {
    return this._call.inputValues[3].value.toString();
  }
}

export class AddTypeCall__Outputs {
  _call: AddTypeCall;

  constructor(call: AddTypeCall) {
    this._call = call;
  }
}

export class AddTypesCall extends ethereum.Call {
  get inputs(): AddTypesCall__Inputs {
    return new AddTypesCall__Inputs(this);
  }

  get outputs(): AddTypesCall__Outputs {
    return new AddTypesCall__Outputs(this);
  }
}

export class AddTypesCall__Inputs {
  _call: AddTypesCall;

  constructor(call: AddTypesCall) {
    this._call = call;
  }

  get inputTypes(): Array<AddTypesCallInputTypesStruct> {
    return this._call.inputValues[0].value.toTupleArray<
      AddTypesCallInputTypesStruct
    >();
  }
}

export class AddTypesCall__Outputs {
  _call: AddTypesCall;

  constructor(call: AddTypesCall) {
    this._call = call;
  }
}

export class AddTypesCallInputTypesStruct extends ethereum.Tuple {
  get nftTypeId(): BigInt {
    return this[0].toBigInt();
  }

  get limit(): BigInt {
    return this[1].toBigInt();
  }

  get minAmt(): BigInt {
    return this[2].toBigInt();
  }

  get streaming(): boolean {
    return this[3].toBoolean();
  }

  get ipfsHash(): string {
    return this[4].toString();
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }
}

export class AuthMintCall extends ethereum.Call {
  get inputs(): AuthMintCall__Inputs {
    return new AuthMintCall__Inputs(this);
  }

  get outputs(): AuthMintCall__Outputs {
    return new AuthMintCall__Outputs(this);
  }
}

export class AuthMintCall__Inputs {
  _call: AuthMintCall;

  constructor(call: AuthMintCall) {
    this._call = call;
  }

  get nftReceiver(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get typeId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get value(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class AuthMintCall__Outputs {
  _call: AuthMintCall;

  constructor(call: AuthMintCall) {
    this._call = call;
  }

  get newTokenId(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class ChangeBuilderCall extends ethereum.Call {
  get inputs(): ChangeBuilderCall__Inputs {
    return new ChangeBuilderCall__Inputs(this);
  }

  get outputs(): ChangeBuilderCall__Outputs {
    return new ChangeBuilderCall__Outputs(this);
  }
}

export class ChangeBuilderCall__Inputs {
  _call: ChangeBuilderCall;

  constructor(call: ChangeBuilderCall) {
    this._call = call;
  }

  get newBuilder(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ChangeBuilderCall__Outputs {
  _call: ChangeBuilderCall;

  constructor(call: ChangeBuilderCall) {
    this._call = call;
  }
}

export class ChangeContractURICall extends ethereum.Call {
  get inputs(): ChangeContractURICall__Inputs {
    return new ChangeContractURICall__Inputs(this);
  }

  get outputs(): ChangeContractURICall__Outputs {
    return new ChangeContractURICall__Outputs(this);
  }
}

export class ChangeContractURICall__Inputs {
  _call: ChangeContractURICall;

  constructor(call: ChangeContractURICall) {
    this._call = call;
  }

  get contractURI_(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class ChangeContractURICall__Outputs {
  _call: ChangeContractURICall;

  constructor(call: ChangeContractURICall) {
    this._call = call;
  }
}

export class ChangeSplitsReceiversCall extends ethereum.Call {
  get inputs(): ChangeSplitsReceiversCall__Inputs {
    return new ChangeSplitsReceiversCall__Inputs(this);
  }

  get outputs(): ChangeSplitsReceiversCall__Outputs {
    return new ChangeSplitsReceiversCall__Outputs(this);
  }
}

export class ChangeSplitsReceiversCall__Inputs {
  _call: ChangeSplitsReceiversCall;

  constructor(call: ChangeSplitsReceiversCall) {
    this._call = call;
  }

  get currSplits(): Array<ChangeSplitsReceiversCallCurrSplitsStruct> {
    return this._call.inputValues[0].value.toTupleArray<
      ChangeSplitsReceiversCallCurrSplitsStruct
    >();
  }

  get newSplits(): Array<ChangeSplitsReceiversCallNewSplitsStruct> {
    return this._call.inputValues[1].value.toTupleArray<
      ChangeSplitsReceiversCallNewSplitsStruct
    >();
  }
}

export class ChangeSplitsReceiversCall__Outputs {
  _call: ChangeSplitsReceiversCall;

  constructor(call: ChangeSplitsReceiversCall) {
    this._call = call;
  }
}

export class ChangeSplitsReceiversCallCurrSplitsStruct extends ethereum.Tuple {
  get receiver(): Address {
    return this[0].toAddress();
  }

  get weight(): BigInt {
    return this[1].toBigInt();
  }
}

export class ChangeSplitsReceiversCallNewSplitsStruct extends ethereum.Tuple {
  get receiver(): Address {
    return this[0].toAddress();
  }

  get weight(): BigInt {
    return this[1].toBigInt();
  }
}

export class CollectCall extends ethereum.Call {
  get inputs(): CollectCall__Inputs {
    return new CollectCall__Inputs(this);
  }

  get outputs(): CollectCall__Outputs {
    return new CollectCall__Outputs(this);
  }
}

export class CollectCall__Inputs {
  _call: CollectCall;

  constructor(call: CollectCall) {
    this._call = call;
  }

  get currSplits(): Array<CollectCallCurrSplitsStruct> {
    return this._call.inputValues[0].value.toTupleArray<
      CollectCallCurrSplitsStruct
    >();
  }
}

export class CollectCall__Outputs {
  _call: CollectCall;

  constructor(call: CollectCall) {
    this._call = call;
  }

  get collected(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get split(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class CollectCallCurrSplitsStruct extends ethereum.Tuple {
  get receiver(): Address {
    return this[0].toAddress();
  }

  get weight(): BigInt {
    return this[1].toBigInt();
  }
}

export class InitCall extends ethereum.Call {
  get inputs(): InitCall__Inputs {
    return new InitCall__Inputs(this);
  }

  get outputs(): InitCall__Outputs {
    return new InitCall__Outputs(this);
  }
}

export class InitCall__Inputs {
  _call: InitCall;

  constructor(call: InitCall) {
    this._call = call;
  }

  get name_(): string {
    return this._call.inputValues[0].value.toString();
  }

  get symbol_(): string {
    return this._call.inputValues[1].value.toString();
  }

  get owner(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get contractURI_(): string {
    return this._call.inputValues[3].value.toString();
  }

  get inputTypes(): Array<InitCallInputTypesStruct> {
    return this._call.inputValues[4].value.toTupleArray<
      InitCallInputTypesStruct
    >();
  }

  get builder_(): Address {
    return this._call.inputValues[5].value.toAddress();
  }

  get splits(): Array<InitCallSplitsStruct> {
    return this._call.inputValues[6].value.toTupleArray<InitCallSplitsStruct>();
  }
}

export class InitCall__Outputs {
  _call: InitCall;

  constructor(call: InitCall) {
    this._call = call;
  }
}

export class InitCallInputTypesStruct extends ethereum.Tuple {
  get nftTypeId(): BigInt {
    return this[0].toBigInt();
  }

  get limit(): BigInt {
    return this[1].toBigInt();
  }

  get minAmt(): BigInt {
    return this[2].toBigInt();
  }

  get streaming(): boolean {
    return this[3].toBoolean();
  }

  get ipfsHash(): string {
    return this[4].toString();
  }
}

export class InitCallSplitsStruct extends ethereum.Tuple {
  get receiver(): Address {
    return this[0].toAddress();
  }

  get weight(): BigInt {
    return this[1].toBigInt();
  }
}

export class MintCall extends ethereum.Call {
  get inputs(): MintCall__Inputs {
    return new MintCall__Inputs(this);
  }

  get outputs(): MintCall__Outputs {
    return new MintCall__Outputs(this);
  }
}

export class MintCall__Inputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get nftReceiver(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get typeId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get giveAmt(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class MintCall__Outputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get newTokenId(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class Mint1Call extends ethereum.Call {
  get inputs(): Mint1Call__Inputs {
    return new Mint1Call__Inputs(this);
  }

  get outputs(): Mint1Call__Outputs {
    return new Mint1Call__Outputs(this);
  }
}

export class Mint1Call__Inputs {
  _call: Mint1Call;

  constructor(call: Mint1Call) {
    this._call = call;
  }

  get nftReceiver(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get typeId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get amtGive(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get nonce(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get expiry(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get v(): i32 {
    return this._call.inputValues[5].value.toI32();
  }

  get r(): Bytes {
    return this._call.inputValues[6].value.toBytes();
  }

  get s(): Bytes {
    return this._call.inputValues[7].value.toBytes();
  }
}

export class Mint1Call__Outputs {
  _call: Mint1Call;

  constructor(call: Mint1Call) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class MintStreamingCall extends ethereum.Call {
  get inputs(): MintStreamingCall__Inputs {
    return new MintStreamingCall__Inputs(this);
  }

  get outputs(): MintStreamingCall__Outputs {
    return new MintStreamingCall__Outputs(this);
  }
}

export class MintStreamingCall__Inputs {
  _call: MintStreamingCall;

  constructor(call: MintStreamingCall) {
    this._call = call;
  }

  get nftReceiver(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get typeId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get topUpAmt(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get amtPerSec(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get nonce(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get expiry(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get v(): i32 {
    return this._call.inputValues[6].value.toI32();
  }

  get r(): Bytes {
    return this._call.inputValues[7].value.toBytes();
  }

  get s(): Bytes {
    return this._call.inputValues[8].value.toBytes();
  }
}

export class MintStreamingCall__Outputs {
  _call: MintStreamingCall;

  constructor(call: MintStreamingCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class MintStreaming1Call extends ethereum.Call {
  get inputs(): MintStreaming1Call__Inputs {
    return new MintStreaming1Call__Inputs(this);
  }

  get outputs(): MintStreaming1Call__Outputs {
    return new MintStreaming1Call__Outputs(this);
  }
}

export class MintStreaming1Call__Inputs {
  _call: MintStreaming1Call;

  constructor(call: MintStreaming1Call) {
    this._call = call;
  }

  get nftReceiver(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get typeId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get topUpAmt(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get amtPerSec(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class MintStreaming1Call__Outputs {
  _call: MintStreaming1Call;

  constructor(call: MintStreaming1Call) {
    this._call = call;
  }

  get newTokenId(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFrom1Call extends ethereum.Call {
  get inputs(): SafeTransferFrom1Call__Inputs {
    return new SafeTransferFrom1Call__Inputs(this);
  }

  get outputs(): SafeTransferFrom1Call__Outputs {
    return new SafeTransferFrom1Call__Outputs(this);
  }
}

export class SafeTransferFrom1Call__Inputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SafeTransferFrom1Call__Outputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class TopUpCall extends ethereum.Call {
  get inputs(): TopUpCall__Inputs {
    return new TopUpCall__Inputs(this);
  }

  get outputs(): TopUpCall__Outputs {
    return new TopUpCall__Outputs(this);
  }
}

export class TopUpCall__Inputs {
  _call: TopUpCall;

  constructor(call: TopUpCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get topUpAmt(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TopUpCall__Outputs {
  _call: TopUpCall;

  constructor(call: TopUpCall) {
    this._call = call;
  }
}

export class TopUp1Call extends ethereum.Call {
  get inputs(): TopUp1Call__Inputs {
    return new TopUp1Call__Inputs(this);
  }

  get outputs(): TopUp1Call__Outputs {
    return new TopUp1Call__Outputs(this);
  }
}

export class TopUp1Call__Inputs {
  _call: TopUp1Call;

  constructor(call: TopUp1Call) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get topUpAmt(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get nonce(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get expiry(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get v(): i32 {
    return this._call.inputValues[4].value.toI32();
  }

  get r(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }

  get s(): Bytes {
    return this._call.inputValues[6].value.toBytes();
  }
}

export class TopUp1Call__Outputs {
  _call: TopUp1Call;

  constructor(call: TopUp1Call) {
    this._call = call;
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get withdrawAmt(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get withdrawn(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}
