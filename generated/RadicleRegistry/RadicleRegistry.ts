// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class NewBuilder extends ethereum.Event {
  get params(): NewBuilder__Params {
    return new NewBuilder__Params(this);
  }
}

export class NewBuilder__Params {
  _event: NewBuilder;

  constructor(event: NewBuilder) {
    this._event = event;
  }

  get builder(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class NewProject extends ethereum.Event {
  get params(): NewProject__Params {
    return new NewProject__Params(this);
  }
}

export class NewProject__Params {
  _event: NewProject;

  constructor(event: NewProject) {
    this._event = event;
  }

  get dripTokenTemplate(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get fundingToken(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get projectOwner(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get name(): string {
    return this._event.parameters[3].value.toString();
  }
}

export class NewTemplate extends ethereum.Event {
  get params(): NewTemplate__Params {
    return new NewTemplate__Params(this);
  }
}

export class NewTemplate__Params {
  _event: NewTemplate;

  constructor(event: NewTemplate) {
    this._event = event;
  }

  get template(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class RadicleRegistry__newProjectInputInputTypesStruct extends ethereum.Tuple {
  get nftTypeId(): BigInt {
    return this[0].toBigInt();
  }

  get limit(): BigInt {
    return this[1].toBigInt();
  }

  get minAmt(): BigInt {
    return this[2].toBigInt();
  }

  get streaming(): boolean {
    return this[3].toBoolean();
  }

  get ipfsHash(): string {
    return this[4].toString();
  }
}

export class RadicleRegistry__newProjectInputSplitsStruct extends ethereum.Tuple {
  get receiver(): Address {
    return this[0].toAddress();
  }

  get weight(): BigInt {
    return this[1].toBigInt();
  }
}

export class RadicleRegistry extends ethereum.SmartContract {
  static bind(address: Address): RadicleRegistry {
    return new RadicleRegistry("RadicleRegistry", address);
  }

  builder(): Address {
    let result = super.call("builder", "builder():(address)", []);

    return result[0].toAddress();
  }

  try_builder(): ethereum.CallResult<Address> {
    let result = super.tryCall("builder", "builder():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  dripsToken(param0: BigInt): Address {
    let result = super.call("dripsToken", "dripsToken(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_dripsToken(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("dripsToken", "dripsToken(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  dripsTokenTemplate(): Address {
    let result = super.call(
      "dripsTokenTemplate",
      "dripsTokenTemplate():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_dripsTokenTemplate(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "dripsTokenTemplate",
      "dripsTokenTemplate():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  newProject(
    name: string,
    symbol: string,
    projectOwner: Address,
    contractURI: string,
    inputTypes: Array<RadicleRegistry__newProjectInputInputTypesStruct>,
    splits: Array<RadicleRegistry__newProjectInputSplitsStruct>
  ): Address {
    let result = super.call(
      "newProject",
      "newProject(string,string,address,string,(uint128,uint64,uint128,bool,string)[],(address,uint32)[]):(address)",
      [
        ethereum.Value.fromString(name),
        ethereum.Value.fromString(symbol),
        ethereum.Value.fromAddress(projectOwner),
        ethereum.Value.fromString(contractURI),
        ethereum.Value.fromTupleArray(inputTypes),
        ethereum.Value.fromTupleArray(splits)
      ]
    );

    return result[0].toAddress();
  }

  try_newProject(
    name: string,
    symbol: string,
    projectOwner: Address,
    contractURI: string,
    inputTypes: Array<RadicleRegistry__newProjectInputInputTypesStruct>,
    splits: Array<RadicleRegistry__newProjectInputSplitsStruct>
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "newProject",
      "newProject(string,string,address,string,(uint128,uint64,uint128,bool,string)[],(address,uint32)[]):(address)",
      [
        ethereum.Value.fromString(name),
        ethereum.Value.fromString(symbol),
        ethereum.Value.fromAddress(projectOwner),
        ethereum.Value.fromString(contractURI),
        ethereum.Value.fromTupleArray(inputTypes),
        ethereum.Value.fromTupleArray(splits)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  nextId(): BigInt {
    let result = super.call("nextId", "nextId():(uint256)", []);

    return result[0].toBigInt();
  }

  try_nextId(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("nextId", "nextId():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get builder_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get owner(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ChangeBuilderCall extends ethereum.Call {
  get inputs(): ChangeBuilderCall__Inputs {
    return new ChangeBuilderCall__Inputs(this);
  }

  get outputs(): ChangeBuilderCall__Outputs {
    return new ChangeBuilderCall__Outputs(this);
  }
}

export class ChangeBuilderCall__Inputs {
  _call: ChangeBuilderCall;

  constructor(call: ChangeBuilderCall) {
    this._call = call;
  }

  get newBuilder(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ChangeBuilderCall__Outputs {
  _call: ChangeBuilderCall;

  constructor(call: ChangeBuilderCall) {
    this._call = call;
  }
}

export class ChangeTemplateCall extends ethereum.Call {
  get inputs(): ChangeTemplateCall__Inputs {
    return new ChangeTemplateCall__Inputs(this);
  }

  get outputs(): ChangeTemplateCall__Outputs {
    return new ChangeTemplateCall__Outputs(this);
  }
}

export class ChangeTemplateCall__Inputs {
  _call: ChangeTemplateCall;

  constructor(call: ChangeTemplateCall) {
    this._call = call;
  }

  get newTemplate(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ChangeTemplateCall__Outputs {
  _call: ChangeTemplateCall;

  constructor(call: ChangeTemplateCall) {
    this._call = call;
  }
}

export class NewProjectCall extends ethereum.Call {
  get inputs(): NewProjectCall__Inputs {
    return new NewProjectCall__Inputs(this);
  }

  get outputs(): NewProjectCall__Outputs {
    return new NewProjectCall__Outputs(this);
  }
}

export class NewProjectCall__Inputs {
  _call: NewProjectCall;

  constructor(call: NewProjectCall) {
    this._call = call;
  }

  get name(): string {
    return this._call.inputValues[0].value.toString();
  }

  get symbol(): string {
    return this._call.inputValues[1].value.toString();
  }

  get projectOwner(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get contractURI(): string {
    return this._call.inputValues[3].value.toString();
  }

  get inputTypes(): Array<NewProjectCallInputTypesStruct> {
    return this._call.inputValues[4].value.toTupleArray<
      NewProjectCallInputTypesStruct
    >();
  }

  get splits(): Array<NewProjectCallSplitsStruct> {
    return this._call.inputValues[5].value.toTupleArray<
      NewProjectCallSplitsStruct
    >();
  }
}

export class NewProjectCall__Outputs {
  _call: NewProjectCall;

  constructor(call: NewProjectCall) {
    this._call = call;
  }

  get fundingToken(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class NewProjectCallInputTypesStruct extends ethereum.Tuple {
  get nftTypeId(): BigInt {
    return this[0].toBigInt();
  }

  get limit(): BigInt {
    return this[1].toBigInt();
  }

  get minAmt(): BigInt {
    return this[2].toBigInt();
  }

  get streaming(): boolean {
    return this[3].toBoolean();
  }

  get ipfsHash(): string {
    return this[4].toString();
  }
}

export class NewProjectCallSplitsStruct extends ethereum.Tuple {
  get receiver(): Address {
    return this[0].toAddress();
  }

  get weight(): BigInt {
    return this[1].toBigInt();
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
