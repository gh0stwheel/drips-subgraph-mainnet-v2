// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AdminChanged extends ethereum.Event {
  get params(): AdminChanged__Params {
    return new AdminChanged__Params(this);
  }
}

export class AdminChanged__Params {
  _event: AdminChanged;

  constructor(event: AdminChanged) {
    this._event = event;
  }

  get previousAdmin(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newAdmin(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class BeaconUpgraded extends ethereum.Event {
  get params(): BeaconUpgraded__Params {
    return new BeaconUpgraded__Params(this);
  }
}

export class BeaconUpgraded__Params {
  _event: BeaconUpgraded;

  constructor(event: BeaconUpgraded) {
    this._event = event;
  }

  get beacon(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Collected extends ethereum.Event {
  get params(): Collected__Params {
    return new Collected__Params(this);
  }
}

export class Collected__Params {
  _event: Collected;

  constructor(event: Collected) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get collected(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get split(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Dripping extends ethereum.Event {
  get params(): Dripping__Params {
    return new Dripping__Params(this);
  }
}

export class Dripping__Params {
  _event: Dripping;

  constructor(event: Dripping) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get receiver(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amtPerSec(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get endTime(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class Dripping1 extends ethereum.Event {
  get params(): Dripping1__Params {
    return new Dripping1__Params(this);
  }
}

export class Dripping1__Params {
  _event: Dripping1;

  constructor(event: Dripping1) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get account(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get receiver(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get amtPerSec(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get endTime(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class DripsUpdated extends ethereum.Event {
  get params(): DripsUpdated__Params {
    return new DripsUpdated__Params(this);
  }
}

export class DripsUpdated__Params {
  _event: DripsUpdated;

  constructor(event: DripsUpdated) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get balance(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get receivers(): Array<DripsUpdatedReceiversStruct> {
    return this._event.parameters[2].value.toTupleArray<
      DripsUpdatedReceiversStruct
    >();
  }
}

export class DripsUpdatedReceiversStruct extends ethereum.Tuple {
  get receiver(): Address {
    return this[0].toAddress();
  }

  get amtPerSec(): BigInt {
    return this[1].toBigInt();
  }
}

export class DripsUpdated1 extends ethereum.Event {
  get params(): DripsUpdated1__Params {
    return new DripsUpdated1__Params(this);
  }
}

export class DripsUpdated1__Params {
  _event: DripsUpdated1;

  constructor(event: DripsUpdated1) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get account(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get balance(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get receivers(): Array<DripsUpdated1ReceiversStruct> {
    return this._event.parameters[3].value.toTupleArray<
      DripsUpdated1ReceiversStruct
    >();
  }
}

export class DripsUpdated1ReceiversStruct extends ethereum.Tuple {
  get receiver(): Address {
    return this[0].toAddress();
  }

  get amtPerSec(): BigInt {
    return this[1].toBigInt();
  }
}

export class Given extends ethereum.Event {
  get params(): Given__Params {
    return new Given__Params(this);
  }
}

export class Given__Params {
  _event: Given;

  constructor(event: Given) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get receiver(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amt(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Given1 extends ethereum.Event {
  get params(): Given1__Params {
    return new Given1__Params(this);
  }
}

export class Given1__Params {
  _event: Given1;

  constructor(event: Given1) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get account(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get receiver(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get amt(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class Paused extends ethereum.Event {
  get params(): Paused__Params {
    return new Paused__Params(this);
  }
}

export class Paused__Params {
  _event: Paused;

  constructor(event: Paused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class ReserveSet extends ethereum.Event {
  get params(): ReserveSet__Params {
    return new ReserveSet__Params(this);
  }
}

export class ReserveSet__Params {
  _event: ReserveSet;

  constructor(event: ReserveSet) {
    this._event = event;
  }

  get oldReserve(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newReserve(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Split extends ethereum.Event {
  get params(): Split__Params {
    return new Split__Params(this);
  }
}

export class Split__Params {
  _event: Split;

  constructor(event: Split) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get receiver(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amt(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class SplitsUpdated extends ethereum.Event {
  get params(): SplitsUpdated__Params {
    return new SplitsUpdated__Params(this);
  }
}

export class SplitsUpdated__Params {
  _event: SplitsUpdated;

  constructor(event: SplitsUpdated) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get receivers(): Array<SplitsUpdatedReceiversStruct> {
    return this._event.parameters[1].value.toTupleArray<
      SplitsUpdatedReceiversStruct
    >();
  }
}

export class SplitsUpdatedReceiversStruct extends ethereum.Tuple {
  get receiver(): Address {
    return this[0].toAddress();
  }

  get weight(): BigInt {
    return this[1].toBigInt();
  }
}

export class Unpaused extends ethereum.Event {
  get params(): Unpaused__Params {
    return new Unpaused__Params(this);
  }
}

export class Unpaused__Params {
  _event: Unpaused;

  constructor(event: Unpaused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Upgraded extends ethereum.Event {
  get params(): Upgraded__Params {
    return new Upgraded__Params(this);
  }
}

export class Upgraded__Params {
  _event: Upgraded;

  constructor(event: Upgraded) {
    this._event = event;
  }

  get implementation(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class DaiDripsHub__collectResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class DaiDripsHub__collectInputCurrReceiversStruct extends ethereum.Tuple {
  get receiver(): Address {
    return this[0].toAddress();
  }

  get weight(): BigInt {
    return this[1].toBigInt();
  }
}

export class DaiDripsHub__collectableResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class DaiDripsHub__collectableInputCurrReceiversStruct extends ethereum.Tuple {
  get receiver(): Address {
    return this[0].toAddress();
  }

  get weight(): BigInt {
    return this[1].toBigInt();
  }
}

export class DaiDripsHub__hashDripsInputReceiversStruct extends ethereum.Tuple {
  get receiver(): Address {
    return this[0].toAddress();
  }

  get amtPerSec(): BigInt {
    return this[1].toBigInt();
  }
}

export class DaiDripsHub__hashSplitsInputReceiversStruct extends ethereum.Tuple {
  get receiver(): Address {
    return this[0].toAddress();
  }

  get weight(): BigInt {
    return this[1].toBigInt();
  }
}

export class DaiDripsHub__setDripsResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromSignedBigInt(this.value1));
    return map;
  }
}

export class DaiDripsHub__setDripsInputCurrReceiversStruct extends ethereum.Tuple {
  get receiver(): Address {
    return this[0].toAddress();
  }

  get amtPerSec(): BigInt {
    return this[1].toBigInt();
  }
}

export class DaiDripsHub__setDripsInputNewReceiversStruct extends ethereum.Tuple {
  get receiver(): Address {
    return this[0].toAddress();
  }

  get amtPerSec(): BigInt {
    return this[1].toBigInt();
  }
}

export class DaiDripsHub__setDrips1Result {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromSignedBigInt(this.value1));
    return map;
  }
}

export class DaiDripsHub__setDrips1InputCurrReceiversStruct extends ethereum.Tuple {
  get receiver(): Address {
    return this[0].toAddress();
  }

  get amtPerSec(): BigInt {
    return this[1].toBigInt();
  }
}

export class DaiDripsHub__setDrips1InputNewReceiversStruct extends ethereum.Tuple {
  get receiver(): Address {
    return this[0].toAddress();
  }

  get amtPerSec(): BigInt {
    return this[1].toBigInt();
  }
}

export class DaiDripsHub__setDripsAndPermitResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromSignedBigInt(this.value1));
    return map;
  }
}

export class DaiDripsHub__setDripsAndPermitInputCurrReceiversStruct extends ethereum.Tuple {
  get receiver(): Address {
    return this[0].toAddress();
  }

  get amtPerSec(): BigInt {
    return this[1].toBigInt();
  }
}

export class DaiDripsHub__setDripsAndPermitInputNewReceiversStruct extends ethereum.Tuple {
  get receiver(): Address {
    return this[0].toAddress();
  }

  get amtPerSec(): BigInt {
    return this[1].toBigInt();
  }
}

export class DaiDripsHub__setDripsAndPermitInputPermitArgsStruct extends ethereum.Tuple {
  get nonce(): BigInt {
    return this[0].toBigInt();
  }

  get expiry(): BigInt {
    return this[1].toBigInt();
  }

  get v(): i32 {
    return this[2].toI32();
  }

  get r(): Bytes {
    return this[3].toBytes();
  }

  get s(): Bytes {
    return this[4].toBytes();
  }
}

export class DaiDripsHub__setDripsAndPermit1Result {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromSignedBigInt(this.value1));
    return map;
  }
}

export class DaiDripsHub__setDripsAndPermit1InputCurrReceiversStruct extends ethereum.Tuple {
  get receiver(): Address {
    return this[0].toAddress();
  }

  get amtPerSec(): BigInt {
    return this[1].toBigInt();
  }
}

export class DaiDripsHub__setDripsAndPermit1InputNewReceiversStruct extends ethereum.Tuple {
  get receiver(): Address {
    return this[0].toAddress();
  }

  get amtPerSec(): BigInt {
    return this[1].toBigInt();
  }
}

export class DaiDripsHub__setDripsAndPermit1InputPermitArgsStruct extends ethereum.Tuple {
  get nonce(): BigInt {
    return this[0].toBigInt();
  }

  get expiry(): BigInt {
    return this[1].toBigInt();
  }

  get v(): i32 {
    return this[2].toI32();
  }

  get r(): Bytes {
    return this[3].toBytes();
  }

  get s(): Bytes {
    return this[4].toBytes();
  }
}

export class DaiDripsHub__setSplitsResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class DaiDripsHub__setSplitsInputCurrReceiversStruct extends ethereum.Tuple {
  get receiver(): Address {
    return this[0].toAddress();
  }

  get weight(): BigInt {
    return this[1].toBigInt();
  }
}

export class DaiDripsHub__setSplitsInputNewReceiversStruct extends ethereum.Tuple {
  get receiver(): Address {
    return this[0].toAddress();
  }

  get weight(): BigInt {
    return this[1].toBigInt();
  }
}

export class DaiDripsHub extends ethereum.SmartContract {
  static bind(address: Address): DaiDripsHub {
    return new DaiDripsHub("DaiDripsHub", address);
  }

  MAX_DRIPS_RECEIVERS(): BigInt {
    let result = super.call(
      "MAX_DRIPS_RECEIVERS",
      "MAX_DRIPS_RECEIVERS():(uint32)",
      []
    );

    return result[0].toBigInt();
  }

  try_MAX_DRIPS_RECEIVERS(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MAX_DRIPS_RECEIVERS",
      "MAX_DRIPS_RECEIVERS():(uint32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MAX_SPLITS_RECEIVERS(): BigInt {
    let result = super.call(
      "MAX_SPLITS_RECEIVERS",
      "MAX_SPLITS_RECEIVERS():(uint32)",
      []
    );

    return result[0].toBigInt();
  }

  try_MAX_SPLITS_RECEIVERS(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MAX_SPLITS_RECEIVERS",
      "MAX_SPLITS_RECEIVERS():(uint32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  TOTAL_SPLITS_WEIGHT(): BigInt {
    let result = super.call(
      "TOTAL_SPLITS_WEIGHT",
      "TOTAL_SPLITS_WEIGHT():(uint32)",
      []
    );

    return result[0].toBigInt();
  }

  try_TOTAL_SPLITS_WEIGHT(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "TOTAL_SPLITS_WEIGHT",
      "TOTAL_SPLITS_WEIGHT():(uint32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  admin(): Address {
    let result = super.call("admin", "admin():(address)", []);

    return result[0].toAddress();
  }

  try_admin(): ethereum.CallResult<Address> {
    let result = super.tryCall("admin", "admin():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  collect(
    user: Address,
    currReceivers: Array<DaiDripsHub__collectInputCurrReceiversStruct>
  ): DaiDripsHub__collectResult {
    let result = super.call(
      "collect",
      "collect(address,(address,uint32)[]):(uint128,uint128)",
      [
        ethereum.Value.fromAddress(user),
        ethereum.Value.fromTupleArray(currReceivers)
      ]
    );

    return new DaiDripsHub__collectResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_collect(
    user: Address,
    currReceivers: Array<DaiDripsHub__collectInputCurrReceiversStruct>
  ): ethereum.CallResult<DaiDripsHub__collectResult> {
    let result = super.tryCall(
      "collect",
      "collect(address,(address,uint32)[]):(uint128,uint128)",
      [
        ethereum.Value.fromAddress(user),
        ethereum.Value.fromTupleArray(currReceivers)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new DaiDripsHub__collectResult(value[0].toBigInt(), value[1].toBigInt())
    );
  }

  collectable(
    user: Address,
    currReceivers: Array<DaiDripsHub__collectableInputCurrReceiversStruct>
  ): DaiDripsHub__collectableResult {
    let result = super.call(
      "collectable",
      "collectable(address,(address,uint32)[]):(uint128,uint128)",
      [
        ethereum.Value.fromAddress(user),
        ethereum.Value.fromTupleArray(currReceivers)
      ]
    );

    return new DaiDripsHub__collectableResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_collectable(
    user: Address,
    currReceivers: Array<DaiDripsHub__collectableInputCurrReceiversStruct>
  ): ethereum.CallResult<DaiDripsHub__collectableResult> {
    let result = super.tryCall(
      "collectable",
      "collectable(address,(address,uint32)[]):(uint128,uint128)",
      [
        ethereum.Value.fromAddress(user),
        ethereum.Value.fromTupleArray(currReceivers)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new DaiDripsHub__collectableResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  cycleSecs(): BigInt {
    let result = super.call("cycleSecs", "cycleSecs():(uint64)", []);

    return result[0].toBigInt();
  }

  try_cycleSecs(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("cycleSecs", "cycleSecs():(uint64)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  dai(): Address {
    let result = super.call("dai", "dai():(address)", []);

    return result[0].toAddress();
  }

  try_dai(): ethereum.CallResult<Address> {
    let result = super.tryCall("dai", "dai():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  dripsHash(user: Address): Bytes {
    let result = super.call("dripsHash", "dripsHash(address):(bytes32)", [
      ethereum.Value.fromAddress(user)
    ]);

    return result[0].toBytes();
  }

  try_dripsHash(user: Address): ethereum.CallResult<Bytes> {
    let result = super.tryCall("dripsHash", "dripsHash(address):(bytes32)", [
      ethereum.Value.fromAddress(user)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  dripsHash1(user: Address, account: BigInt): Bytes {
    let result = super.call(
      "dripsHash",
      "dripsHash(address,uint256):(bytes32)",
      [
        ethereum.Value.fromAddress(user),
        ethereum.Value.fromUnsignedBigInt(account)
      ]
    );

    return result[0].toBytes();
  }

  try_dripsHash1(user: Address, account: BigInt): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "dripsHash",
      "dripsHash(address,uint256):(bytes32)",
      [
        ethereum.Value.fromAddress(user),
        ethereum.Value.fromUnsignedBigInt(account)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  erc20(): Address {
    let result = super.call("erc20", "erc20():(address)", []);

    return result[0].toAddress();
  }

  try_erc20(): ethereum.CallResult<Address> {
    let result = super.tryCall("erc20", "erc20():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  flushCycles(user: Address, maxCycles: BigInt): BigInt {
    let result = super.call(
      "flushCycles",
      "flushCycles(address,uint64):(uint64)",
      [
        ethereum.Value.fromAddress(user),
        ethereum.Value.fromUnsignedBigInt(maxCycles)
      ]
    );

    return result[0].toBigInt();
  }

  try_flushCycles(
    user: Address,
    maxCycles: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "flushCycles",
      "flushCycles(address,uint64):(uint64)",
      [
        ethereum.Value.fromAddress(user),
        ethereum.Value.fromUnsignedBigInt(maxCycles)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  flushableCycles(user: Address): BigInt {
    let result = super.call(
      "flushableCycles",
      "flushableCycles(address):(uint64)",
      [ethereum.Value.fromAddress(user)]
    );

    return result[0].toBigInt();
  }

  try_flushableCycles(user: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "flushableCycles",
      "flushableCycles(address):(uint64)",
      [ethereum.Value.fromAddress(user)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  hashDrips(
    update: BigInt,
    balance: BigInt,
    receivers: Array<DaiDripsHub__hashDripsInputReceiversStruct>
  ): Bytes {
    let result = super.call(
      "hashDrips",
      "hashDrips(uint64,uint128,(address,uint128)[]):(bytes32)",
      [
        ethereum.Value.fromUnsignedBigInt(update),
        ethereum.Value.fromUnsignedBigInt(balance),
        ethereum.Value.fromTupleArray(receivers)
      ]
    );

    return result[0].toBytes();
  }

  try_hashDrips(
    update: BigInt,
    balance: BigInt,
    receivers: Array<DaiDripsHub__hashDripsInputReceiversStruct>
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "hashDrips",
      "hashDrips(uint64,uint128,(address,uint128)[]):(bytes32)",
      [
        ethereum.Value.fromUnsignedBigInt(update),
        ethereum.Value.fromUnsignedBigInt(balance),
        ethereum.Value.fromTupleArray(receivers)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  hashSplits(
    receivers: Array<DaiDripsHub__hashSplitsInputReceiversStruct>
  ): Bytes {
    let result = super.call(
      "hashSplits",
      "hashSplits((address,uint32)[]):(bytes32)",
      [ethereum.Value.fromTupleArray(receivers)]
    );

    return result[0].toBytes();
  }

  try_hashSplits(
    receivers: Array<DaiDripsHub__hashSplitsInputReceiversStruct>
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "hashSplits",
      "hashSplits((address,uint32)[]):(bytes32)",
      [ethereum.Value.fromTupleArray(receivers)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  paused(): boolean {
    let result = super.call("paused", "paused():(bool)", []);

    return result[0].toBoolean();
  }

  try_paused(): ethereum.CallResult<boolean> {
    let result = super.tryCall("paused", "paused():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  reserve(): Address {
    let result = super.call("reserve", "reserve():(address)", []);

    return result[0].toAddress();
  }

  try_reserve(): ethereum.CallResult<Address> {
    let result = super.tryCall("reserve", "reserve():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  setDrips(
    account: BigInt,
    lastUpdate: BigInt,
    lastBalance: BigInt,
    currReceivers: Array<DaiDripsHub__setDripsInputCurrReceiversStruct>,
    balanceDelta: BigInt,
    newReceivers: Array<DaiDripsHub__setDripsInputNewReceiversStruct>
  ): DaiDripsHub__setDripsResult {
    let result = super.call(
      "setDrips",
      "setDrips(uint256,uint64,uint128,(address,uint128)[],int128,(address,uint128)[]):(uint128,int128)",
      [
        ethereum.Value.fromUnsignedBigInt(account),
        ethereum.Value.fromUnsignedBigInt(lastUpdate),
        ethereum.Value.fromUnsignedBigInt(lastBalance),
        ethereum.Value.fromTupleArray(currReceivers),
        ethereum.Value.fromSignedBigInt(balanceDelta),
        ethereum.Value.fromTupleArray(newReceivers)
      ]
    );

    return new DaiDripsHub__setDripsResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_setDrips(
    account: BigInt,
    lastUpdate: BigInt,
    lastBalance: BigInt,
    currReceivers: Array<DaiDripsHub__setDripsInputCurrReceiversStruct>,
    balanceDelta: BigInt,
    newReceivers: Array<DaiDripsHub__setDripsInputNewReceiversStruct>
  ): ethereum.CallResult<DaiDripsHub__setDripsResult> {
    let result = super.tryCall(
      "setDrips",
      "setDrips(uint256,uint64,uint128,(address,uint128)[],int128,(address,uint128)[]):(uint128,int128)",
      [
        ethereum.Value.fromUnsignedBigInt(account),
        ethereum.Value.fromUnsignedBigInt(lastUpdate),
        ethereum.Value.fromUnsignedBigInt(lastBalance),
        ethereum.Value.fromTupleArray(currReceivers),
        ethereum.Value.fromSignedBigInt(balanceDelta),
        ethereum.Value.fromTupleArray(newReceivers)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new DaiDripsHub__setDripsResult(value[0].toBigInt(), value[1].toBigInt())
    );
  }

  setDrips1(
    lastUpdate: BigInt,
    lastBalance: BigInt,
    currReceivers: Array<DaiDripsHub__setDrips1InputCurrReceiversStruct>,
    balanceDelta: BigInt,
    newReceivers: Array<DaiDripsHub__setDrips1InputNewReceiversStruct>
  ): DaiDripsHub__setDrips1Result {
    let result = super.call(
      "setDrips",
      "setDrips(uint64,uint128,(address,uint128)[],int128,(address,uint128)[]):(uint128,int128)",
      [
        ethereum.Value.fromUnsignedBigInt(lastUpdate),
        ethereum.Value.fromUnsignedBigInt(lastBalance),
        ethereum.Value.fromTupleArray(currReceivers),
        ethereum.Value.fromSignedBigInt(balanceDelta),
        ethereum.Value.fromTupleArray(newReceivers)
      ]
    );

    return new DaiDripsHub__setDrips1Result(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_setDrips1(
    lastUpdate: BigInt,
    lastBalance: BigInt,
    currReceivers: Array<DaiDripsHub__setDrips1InputCurrReceiversStruct>,
    balanceDelta: BigInt,
    newReceivers: Array<DaiDripsHub__setDrips1InputNewReceiversStruct>
  ): ethereum.CallResult<DaiDripsHub__setDrips1Result> {
    let result = super.tryCall(
      "setDrips",
      "setDrips(uint64,uint128,(address,uint128)[],int128,(address,uint128)[]):(uint128,int128)",
      [
        ethereum.Value.fromUnsignedBigInt(lastUpdate),
        ethereum.Value.fromUnsignedBigInt(lastBalance),
        ethereum.Value.fromTupleArray(currReceivers),
        ethereum.Value.fromSignedBigInt(balanceDelta),
        ethereum.Value.fromTupleArray(newReceivers)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new DaiDripsHub__setDrips1Result(value[0].toBigInt(), value[1].toBigInt())
    );
  }

  setDripsAndPermit(
    account: BigInt,
    lastUpdate: BigInt,
    lastBalance: BigInt,
    currReceivers: Array<
      DaiDripsHub__setDripsAndPermitInputCurrReceiversStruct
    >,
    balanceDelta: BigInt,
    newReceivers: Array<DaiDripsHub__setDripsAndPermitInputNewReceiversStruct>,
    permitArgs: DaiDripsHub__setDripsAndPermitInputPermitArgsStruct
  ): DaiDripsHub__setDripsAndPermitResult {
    let result = super.call(
      "setDripsAndPermit",
      "setDripsAndPermit(uint256,uint64,uint128,(address,uint128)[],int128,(address,uint128)[],(uint256,uint256,uint8,bytes32,bytes32)):(uint128,int128)",
      [
        ethereum.Value.fromUnsignedBigInt(account),
        ethereum.Value.fromUnsignedBigInt(lastUpdate),
        ethereum.Value.fromUnsignedBigInt(lastBalance),
        ethereum.Value.fromTupleArray(currReceivers),
        ethereum.Value.fromSignedBigInt(balanceDelta),
        ethereum.Value.fromTupleArray(newReceivers),
        ethereum.Value.fromTuple(permitArgs)
      ]
    );

    return new DaiDripsHub__setDripsAndPermitResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_setDripsAndPermit(
    account: BigInt,
    lastUpdate: BigInt,
    lastBalance: BigInt,
    currReceivers: Array<
      DaiDripsHub__setDripsAndPermitInputCurrReceiversStruct
    >,
    balanceDelta: BigInt,
    newReceivers: Array<DaiDripsHub__setDripsAndPermitInputNewReceiversStruct>,
    permitArgs: DaiDripsHub__setDripsAndPermitInputPermitArgsStruct
  ): ethereum.CallResult<DaiDripsHub__setDripsAndPermitResult> {
    let result = super.tryCall(
      "setDripsAndPermit",
      "setDripsAndPermit(uint256,uint64,uint128,(address,uint128)[],int128,(address,uint128)[],(uint256,uint256,uint8,bytes32,bytes32)):(uint128,int128)",
      [
        ethereum.Value.fromUnsignedBigInt(account),
        ethereum.Value.fromUnsignedBigInt(lastUpdate),
        ethereum.Value.fromUnsignedBigInt(lastBalance),
        ethereum.Value.fromTupleArray(currReceivers),
        ethereum.Value.fromSignedBigInt(balanceDelta),
        ethereum.Value.fromTupleArray(newReceivers),
        ethereum.Value.fromTuple(permitArgs)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new DaiDripsHub__setDripsAndPermitResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  setDripsAndPermit1(
    lastUpdate: BigInt,
    lastBalance: BigInt,
    currReceivers: Array<
      DaiDripsHub__setDripsAndPermit1InputCurrReceiversStruct
    >,
    balanceDelta: BigInt,
    newReceivers: Array<DaiDripsHub__setDripsAndPermit1InputNewReceiversStruct>,
    permitArgs: DaiDripsHub__setDripsAndPermit1InputPermitArgsStruct
  ): DaiDripsHub__setDripsAndPermit1Result {
    let result = super.call(
      "setDripsAndPermit",
      "setDripsAndPermit(uint64,uint128,(address,uint128)[],int128,(address,uint128)[],(uint256,uint256,uint8,bytes32,bytes32)):(uint128,int128)",
      [
        ethereum.Value.fromUnsignedBigInt(lastUpdate),
        ethereum.Value.fromUnsignedBigInt(lastBalance),
        ethereum.Value.fromTupleArray(currReceivers),
        ethereum.Value.fromSignedBigInt(balanceDelta),
        ethereum.Value.fromTupleArray(newReceivers),
        ethereum.Value.fromTuple(permitArgs)
      ]
    );

    return new DaiDripsHub__setDripsAndPermit1Result(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_setDripsAndPermit1(
    lastUpdate: BigInt,
    lastBalance: BigInt,
    currReceivers: Array<
      DaiDripsHub__setDripsAndPermit1InputCurrReceiversStruct
    >,
    balanceDelta: BigInt,
    newReceivers: Array<DaiDripsHub__setDripsAndPermit1InputNewReceiversStruct>,
    permitArgs: DaiDripsHub__setDripsAndPermit1InputPermitArgsStruct
  ): ethereum.CallResult<DaiDripsHub__setDripsAndPermit1Result> {
    let result = super.tryCall(
      "setDripsAndPermit",
      "setDripsAndPermit(uint64,uint128,(address,uint128)[],int128,(address,uint128)[],(uint256,uint256,uint8,bytes32,bytes32)):(uint128,int128)",
      [
        ethereum.Value.fromUnsignedBigInt(lastUpdate),
        ethereum.Value.fromUnsignedBigInt(lastBalance),
        ethereum.Value.fromTupleArray(currReceivers),
        ethereum.Value.fromSignedBigInt(balanceDelta),
        ethereum.Value.fromTupleArray(newReceivers),
        ethereum.Value.fromTuple(permitArgs)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new DaiDripsHub__setDripsAndPermit1Result(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  setSplits(
    currReceivers: Array<DaiDripsHub__setSplitsInputCurrReceiversStruct>,
    newReceivers: Array<DaiDripsHub__setSplitsInputNewReceiversStruct>
  ): DaiDripsHub__setSplitsResult {
    let result = super.call(
      "setSplits",
      "setSplits((address,uint32)[],(address,uint32)[]):(uint128,uint128)",
      [
        ethereum.Value.fromTupleArray(currReceivers),
        ethereum.Value.fromTupleArray(newReceivers)
      ]
    );

    return new DaiDripsHub__setSplitsResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_setSplits(
    currReceivers: Array<DaiDripsHub__setSplitsInputCurrReceiversStruct>,
    newReceivers: Array<DaiDripsHub__setSplitsInputNewReceiversStruct>
  ): ethereum.CallResult<DaiDripsHub__setSplitsResult> {
    let result = super.tryCall(
      "setSplits",
      "setSplits((address,uint32)[],(address,uint32)[]):(uint128,uint128)",
      [
        ethereum.Value.fromTupleArray(currReceivers),
        ethereum.Value.fromTupleArray(newReceivers)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new DaiDripsHub__setSplitsResult(value[0].toBigInt(), value[1].toBigInt())
    );
  }

  splitsHash(user: Address): Bytes {
    let result = super.call("splitsHash", "splitsHash(address):(bytes32)", [
      ethereum.Value.fromAddress(user)
    ]);

    return result[0].toBytes();
  }

  try_splitsHash(user: Address): ethereum.CallResult<Bytes> {
    let result = super.tryCall("splitsHash", "splitsHash(address):(bytes32)", [
      ethereum.Value.fromAddress(user)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get cycleSecs(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _dai(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ChangeAdminCall extends ethereum.Call {
  get inputs(): ChangeAdminCall__Inputs {
    return new ChangeAdminCall__Inputs(this);
  }

  get outputs(): ChangeAdminCall__Outputs {
    return new ChangeAdminCall__Outputs(this);
  }
}

export class ChangeAdminCall__Inputs {
  _call: ChangeAdminCall;

  constructor(call: ChangeAdminCall) {
    this._call = call;
  }

  get newAdmin(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ChangeAdminCall__Outputs {
  _call: ChangeAdminCall;

  constructor(call: ChangeAdminCall) {
    this._call = call;
  }
}

export class CollectCall extends ethereum.Call {
  get inputs(): CollectCall__Inputs {
    return new CollectCall__Inputs(this);
  }

  get outputs(): CollectCall__Outputs {
    return new CollectCall__Outputs(this);
  }
}

export class CollectCall__Inputs {
  _call: CollectCall;

  constructor(call: CollectCall) {
    this._call = call;
  }

  get user(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get currReceivers(): Array<CollectCallCurrReceiversStruct> {
    return this._call.inputValues[1].value.toTupleArray<
      CollectCallCurrReceiversStruct
    >();
  }
}

export class CollectCall__Outputs {
  _call: CollectCall;

  constructor(call: CollectCall) {
    this._call = call;
  }

  get collected(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get split(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class CollectCallCurrReceiversStruct extends ethereum.Tuple {
  get receiver(): Address {
    return this[0].toAddress();
  }

  get weight(): BigInt {
    return this[1].toBigInt();
  }
}

export class FlushCyclesCall extends ethereum.Call {
  get inputs(): FlushCyclesCall__Inputs {
    return new FlushCyclesCall__Inputs(this);
  }

  get outputs(): FlushCyclesCall__Outputs {
    return new FlushCyclesCall__Outputs(this);
  }
}

export class FlushCyclesCall__Inputs {
  _call: FlushCyclesCall;

  constructor(call: FlushCyclesCall) {
    this._call = call;
  }

  get user(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get maxCycles(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class FlushCyclesCall__Outputs {
  _call: FlushCyclesCall;

  constructor(call: FlushCyclesCall) {
    this._call = call;
  }

  get flushable(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class GiveCall extends ethereum.Call {
  get inputs(): GiveCall__Inputs {
    return new GiveCall__Inputs(this);
  }

  get outputs(): GiveCall__Outputs {
    return new GiveCall__Outputs(this);
  }
}

export class GiveCall__Inputs {
  _call: GiveCall;

  constructor(call: GiveCall) {
    this._call = call;
  }

  get account(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get receiver(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amt(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class GiveCall__Outputs {
  _call: GiveCall;

  constructor(call: GiveCall) {
    this._call = call;
  }
}

export class Give1Call extends ethereum.Call {
  get inputs(): Give1Call__Inputs {
    return new Give1Call__Inputs(this);
  }

  get outputs(): Give1Call__Outputs {
    return new Give1Call__Outputs(this);
  }
}

export class Give1Call__Inputs {
  _call: Give1Call;

  constructor(call: Give1Call) {
    this._call = call;
  }

  get receiver(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amt(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class Give1Call__Outputs {
  _call: Give1Call;

  constructor(call: Give1Call) {
    this._call = call;
  }
}

export class GiveAndPermitCall extends ethereum.Call {
  get inputs(): GiveAndPermitCall__Inputs {
    return new GiveAndPermitCall__Inputs(this);
  }

  get outputs(): GiveAndPermitCall__Outputs {
    return new GiveAndPermitCall__Outputs(this);
  }
}

export class GiveAndPermitCall__Inputs {
  _call: GiveAndPermitCall;

  constructor(call: GiveAndPermitCall) {
    this._call = call;
  }

  get receiver(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amt(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get permitArgs(): GiveAndPermitCallPermitArgsStruct {
    return changetype<GiveAndPermitCallPermitArgsStruct>(
      this._call.inputValues[2].value.toTuple()
    );
  }
}

export class GiveAndPermitCall__Outputs {
  _call: GiveAndPermitCall;

  constructor(call: GiveAndPermitCall) {
    this._call = call;
  }
}

export class GiveAndPermitCallPermitArgsStruct extends ethereum.Tuple {
  get nonce(): BigInt {
    return this[0].toBigInt();
  }

  get expiry(): BigInt {
    return this[1].toBigInt();
  }

  get v(): i32 {
    return this[2].toI32();
  }

  get r(): Bytes {
    return this[3].toBytes();
  }

  get s(): Bytes {
    return this[4].toBytes();
  }
}

export class GiveAndPermit1Call extends ethereum.Call {
  get inputs(): GiveAndPermit1Call__Inputs {
    return new GiveAndPermit1Call__Inputs(this);
  }

  get outputs(): GiveAndPermit1Call__Outputs {
    return new GiveAndPermit1Call__Outputs(this);
  }
}

export class GiveAndPermit1Call__Inputs {
  _call: GiveAndPermit1Call;

  constructor(call: GiveAndPermit1Call) {
    this._call = call;
  }

  get account(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get receiver(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amt(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get permitArgs(): GiveAndPermit1CallPermitArgsStruct {
    return changetype<GiveAndPermit1CallPermitArgsStruct>(
      this._call.inputValues[3].value.toTuple()
    );
  }
}

export class GiveAndPermit1Call__Outputs {
  _call: GiveAndPermit1Call;

  constructor(call: GiveAndPermit1Call) {
    this._call = call;
  }
}

export class GiveAndPermit1CallPermitArgsStruct extends ethereum.Tuple {
  get nonce(): BigInt {
    return this[0].toBigInt();
  }

  get expiry(): BigInt {
    return this[1].toBigInt();
  }

  get v(): i32 {
    return this[2].toI32();
  }

  get r(): Bytes {
    return this[3].toBytes();
  }

  get s(): Bytes {
    return this[4].toBytes();
  }
}

export class PauseCall extends ethereum.Call {
  get inputs(): PauseCall__Inputs {
    return new PauseCall__Inputs(this);
  }

  get outputs(): PauseCall__Outputs {
    return new PauseCall__Outputs(this);
  }
}

export class PauseCall__Inputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class PauseCall__Outputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class SetDripsCall extends ethereum.Call {
  get inputs(): SetDripsCall__Inputs {
    return new SetDripsCall__Inputs(this);
  }

  get outputs(): SetDripsCall__Outputs {
    return new SetDripsCall__Outputs(this);
  }
}

export class SetDripsCall__Inputs {
  _call: SetDripsCall;

  constructor(call: SetDripsCall) {
    this._call = call;
  }

  get account(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get lastUpdate(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get lastBalance(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get currReceivers(): Array<SetDripsCallCurrReceiversStruct> {
    return this._call.inputValues[3].value.toTupleArray<
      SetDripsCallCurrReceiversStruct
    >();
  }

  get balanceDelta(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get newReceivers(): Array<SetDripsCallNewReceiversStruct> {
    return this._call.inputValues[5].value.toTupleArray<
      SetDripsCallNewReceiversStruct
    >();
  }
}

export class SetDripsCall__Outputs {
  _call: SetDripsCall;

  constructor(call: SetDripsCall) {
    this._call = call;
  }

  get newBalance(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get realBalanceDelta(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class SetDripsCallCurrReceiversStruct extends ethereum.Tuple {
  get receiver(): Address {
    return this[0].toAddress();
  }

  get amtPerSec(): BigInt {
    return this[1].toBigInt();
  }
}

export class SetDripsCallNewReceiversStruct extends ethereum.Tuple {
  get receiver(): Address {
    return this[0].toAddress();
  }

  get amtPerSec(): BigInt {
    return this[1].toBigInt();
  }
}

export class SetDrips1Call extends ethereum.Call {
  get inputs(): SetDrips1Call__Inputs {
    return new SetDrips1Call__Inputs(this);
  }

  get outputs(): SetDrips1Call__Outputs {
    return new SetDrips1Call__Outputs(this);
  }
}

export class SetDrips1Call__Inputs {
  _call: SetDrips1Call;

  constructor(call: SetDrips1Call) {
    this._call = call;
  }

  get lastUpdate(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get lastBalance(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get currReceivers(): Array<SetDrips1CallCurrReceiversStruct> {
    return this._call.inputValues[2].value.toTupleArray<
      SetDrips1CallCurrReceiversStruct
    >();
  }

  get balanceDelta(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get newReceivers(): Array<SetDrips1CallNewReceiversStruct> {
    return this._call.inputValues[4].value.toTupleArray<
      SetDrips1CallNewReceiversStruct
    >();
  }
}

export class SetDrips1Call__Outputs {
  _call: SetDrips1Call;

  constructor(call: SetDrips1Call) {
    this._call = call;
  }

  get newBalance(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get realBalanceDelta(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class SetDrips1CallCurrReceiversStruct extends ethereum.Tuple {
  get receiver(): Address {
    return this[0].toAddress();
  }

  get amtPerSec(): BigInt {
    return this[1].toBigInt();
  }
}

export class SetDrips1CallNewReceiversStruct extends ethereum.Tuple {
  get receiver(): Address {
    return this[0].toAddress();
  }

  get amtPerSec(): BigInt {
    return this[1].toBigInt();
  }
}

export class SetDripsAndPermitCall extends ethereum.Call {
  get inputs(): SetDripsAndPermitCall__Inputs {
    return new SetDripsAndPermitCall__Inputs(this);
  }

  get outputs(): SetDripsAndPermitCall__Outputs {
    return new SetDripsAndPermitCall__Outputs(this);
  }
}

export class SetDripsAndPermitCall__Inputs {
  _call: SetDripsAndPermitCall;

  constructor(call: SetDripsAndPermitCall) {
    this._call = call;
  }

  get account(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get lastUpdate(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get lastBalance(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get currReceivers(): Array<SetDripsAndPermitCallCurrReceiversStruct> {
    return this._call.inputValues[3].value.toTupleArray<
      SetDripsAndPermitCallCurrReceiversStruct
    >();
  }

  get balanceDelta(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get newReceivers(): Array<SetDripsAndPermitCallNewReceiversStruct> {
    return this._call.inputValues[5].value.toTupleArray<
      SetDripsAndPermitCallNewReceiversStruct
    >();
  }

  get permitArgs(): SetDripsAndPermitCallPermitArgsStruct {
    return changetype<SetDripsAndPermitCallPermitArgsStruct>(
      this._call.inputValues[6].value.toTuple()
    );
  }
}

export class SetDripsAndPermitCall__Outputs {
  _call: SetDripsAndPermitCall;

  constructor(call: SetDripsAndPermitCall) {
    this._call = call;
  }

  get newBalance(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get realBalanceDelta(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class SetDripsAndPermitCallCurrReceiversStruct extends ethereum.Tuple {
  get receiver(): Address {
    return this[0].toAddress();
  }

  get amtPerSec(): BigInt {
    return this[1].toBigInt();
  }
}

export class SetDripsAndPermitCallNewReceiversStruct extends ethereum.Tuple {
  get receiver(): Address {
    return this[0].toAddress();
  }

  get amtPerSec(): BigInt {
    return this[1].toBigInt();
  }
}

export class SetDripsAndPermitCallPermitArgsStruct extends ethereum.Tuple {
  get nonce(): BigInt {
    return this[0].toBigInt();
  }

  get expiry(): BigInt {
    return this[1].toBigInt();
  }

  get v(): i32 {
    return this[2].toI32();
  }

  get r(): Bytes {
    return this[3].toBytes();
  }

  get s(): Bytes {
    return this[4].toBytes();
  }
}

export class SetDripsAndPermit1Call extends ethereum.Call {
  get inputs(): SetDripsAndPermit1Call__Inputs {
    return new SetDripsAndPermit1Call__Inputs(this);
  }

  get outputs(): SetDripsAndPermit1Call__Outputs {
    return new SetDripsAndPermit1Call__Outputs(this);
  }
}

export class SetDripsAndPermit1Call__Inputs {
  _call: SetDripsAndPermit1Call;

  constructor(call: SetDripsAndPermit1Call) {
    this._call = call;
  }

  get lastUpdate(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get lastBalance(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get currReceivers(): Array<SetDripsAndPermit1CallCurrReceiversStruct> {
    return this._call.inputValues[2].value.toTupleArray<
      SetDripsAndPermit1CallCurrReceiversStruct
    >();
  }

  get balanceDelta(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get newReceivers(): Array<SetDripsAndPermit1CallNewReceiversStruct> {
    return this._call.inputValues[4].value.toTupleArray<
      SetDripsAndPermit1CallNewReceiversStruct
    >();
  }

  get permitArgs(): SetDripsAndPermit1CallPermitArgsStruct {
    return changetype<SetDripsAndPermit1CallPermitArgsStruct>(
      this._call.inputValues[5].value.toTuple()
    );
  }
}

export class SetDripsAndPermit1Call__Outputs {
  _call: SetDripsAndPermit1Call;

  constructor(call: SetDripsAndPermit1Call) {
    this._call = call;
  }

  get newBalance(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get realBalanceDelta(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class SetDripsAndPermit1CallCurrReceiversStruct extends ethereum.Tuple {
  get receiver(): Address {
    return this[0].toAddress();
  }

  get amtPerSec(): BigInt {
    return this[1].toBigInt();
  }
}

export class SetDripsAndPermit1CallNewReceiversStruct extends ethereum.Tuple {
  get receiver(): Address {
    return this[0].toAddress();
  }

  get amtPerSec(): BigInt {
    return this[1].toBigInt();
  }
}

export class SetDripsAndPermit1CallPermitArgsStruct extends ethereum.Tuple {
  get nonce(): BigInt {
    return this[0].toBigInt();
  }

  get expiry(): BigInt {
    return this[1].toBigInt();
  }

  get v(): i32 {
    return this[2].toI32();
  }

  get r(): Bytes {
    return this[3].toBytes();
  }

  get s(): Bytes {
    return this[4].toBytes();
  }
}

export class SetReserveCall extends ethereum.Call {
  get inputs(): SetReserveCall__Inputs {
    return new SetReserveCall__Inputs(this);
  }

  get outputs(): SetReserveCall__Outputs {
    return new SetReserveCall__Outputs(this);
  }
}

export class SetReserveCall__Inputs {
  _call: SetReserveCall;

  constructor(call: SetReserveCall) {
    this._call = call;
  }

  get newReserve(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetReserveCall__Outputs {
  _call: SetReserveCall;

  constructor(call: SetReserveCall) {
    this._call = call;
  }
}

export class SetSplitsCall extends ethereum.Call {
  get inputs(): SetSplitsCall__Inputs {
    return new SetSplitsCall__Inputs(this);
  }

  get outputs(): SetSplitsCall__Outputs {
    return new SetSplitsCall__Outputs(this);
  }
}

export class SetSplitsCall__Inputs {
  _call: SetSplitsCall;

  constructor(call: SetSplitsCall) {
    this._call = call;
  }

  get currReceivers(): Array<SetSplitsCallCurrReceiversStruct> {
    return this._call.inputValues[0].value.toTupleArray<
      SetSplitsCallCurrReceiversStruct
    >();
  }

  get newReceivers(): Array<SetSplitsCallNewReceiversStruct> {
    return this._call.inputValues[1].value.toTupleArray<
      SetSplitsCallNewReceiversStruct
    >();
  }
}

export class SetSplitsCall__Outputs {
  _call: SetSplitsCall;

  constructor(call: SetSplitsCall) {
    this._call = call;
  }

  get collected(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get split(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class SetSplitsCallCurrReceiversStruct extends ethereum.Tuple {
  get receiver(): Address {
    return this[0].toAddress();
  }

  get weight(): BigInt {
    return this[1].toBigInt();
  }
}

export class SetSplitsCallNewReceiversStruct extends ethereum.Tuple {
  get receiver(): Address {
    return this[0].toAddress();
  }

  get weight(): BigInt {
    return this[1].toBigInt();
  }
}

export class UnpauseCall extends ethereum.Call {
  get inputs(): UnpauseCall__Inputs {
    return new UnpauseCall__Inputs(this);
  }

  get outputs(): UnpauseCall__Outputs {
    return new UnpauseCall__Outputs(this);
  }
}

export class UnpauseCall__Inputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class UnpauseCall__Outputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class UpgradeToCall extends ethereum.Call {
  get inputs(): UpgradeToCall__Inputs {
    return new UpgradeToCall__Inputs(this);
  }

  get outputs(): UpgradeToCall__Outputs {
    return new UpgradeToCall__Outputs(this);
  }
}

export class UpgradeToCall__Inputs {
  _call: UpgradeToCall;

  constructor(call: UpgradeToCall) {
    this._call = call;
  }

  get newImplementation(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpgradeToCall__Outputs {
  _call: UpgradeToCall;

  constructor(call: UpgradeToCall) {
    this._call = call;
  }
}

export class UpgradeToAndCallCall extends ethereum.Call {
  get inputs(): UpgradeToAndCallCall__Inputs {
    return new UpgradeToAndCallCall__Inputs(this);
  }

  get outputs(): UpgradeToAndCallCall__Outputs {
    return new UpgradeToAndCallCall__Outputs(this);
  }
}

export class UpgradeToAndCallCall__Inputs {
  _call: UpgradeToAndCallCall;

  constructor(call: UpgradeToAndCallCall) {
    this._call = call;
  }

  get newImplementation(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get data(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class UpgradeToAndCallCall__Outputs {
  _call: UpgradeToAndCallCall;

  constructor(call: UpgradeToAndCallCall) {
    this._call = call;
  }
}
